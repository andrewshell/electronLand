<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Mon, 12 Jun 2017 14:49:34 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: electronLandUI</title>
		<dateCreated>Tue, 25 Apr 2017 20:47:08 GMT</dateCreated>
		<dateModified>Mon, 12 Jun 2017 14:49:34 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 7, 8, 18</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>199</windowTop>
		<windowLeft>613</windowLeft>
		<windowBottom>1156</windowBottom>
		<windowRight>1878</windowRight>
		</head>
	<body>
		<outline text="/fargo.io/code/shared/electronland/">
			<outline text="outlinersettings.opml">
				<outline text="Notes" created="Sun, 08 Jun 2014 15:10:42 GMT" pgfnum="42033">
					<outline text="&lt;%prefs.checkboxPref (&quot;One note per day&quot;, &quot;flOneNotePerDay&quot;)%&gt;"/>
					<outline text="&lt;%prefs.checkboxPref (&quot;Month-based&quot;, &quot;flPlusIconMonthBased&quot;)%&gt;"/>
					<outline text="&lt;%prefs.stringPref (&quot;Type&quot;, &quot;typeInsertedNode&quot;, &quot;The type attribute for newly created notes.&quot;)%&gt;"/>
					</outline>
				<outline text="Tweets" created="Sat, 15 Jun 2013 22:00:35 GMT" pgfnum="26413">
					<outline text="&lt;%prefs.checkboxPref (&quot;Confirm tweets before sending.&quot;, &quot;flConfirmTweets&quot;)%&gt;"/>
					<outline text="&lt;%prefs.checkboxPref (&quot;Automatically check for replies.&quot;, &quot;flCheckForReplies&quot;)%&gt;"/>
					</outline>
				</outline>
			<outline text="oldsettings.opml" isComment="true">
				<outline text="Misc">
					<outline text="&lt;%prefs.stringPref (&quot;Magic folder&quot;, &quot;pathToMagicFolder&quot;, &quot;The place where all the magical files are stored.&quot;)%&gt;"/>
					</outline>
				</outline>
			<outline text="outlinerhomepage.js">
				<outline text="const shell = require (__dirname + &quot;/lib/electronshell.js&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);   "/>
				<outline text=""/>
				<outline text="var currentFilePath = undefined;"/>
				<outline text="var whenLastKeystroke = new Date (), whenLastUserAction = new Date ();"/>
				<outline text="var editorSerialnum = 0;"/>
				<outline text="var idCurrentEditor = undefined;"/>
				<outline text="var whenLastSave = undefined;"/>
				<outline text="var flPrefsChanged = false;"/>
				<outline text="var twUserInfo;"/>
				<outline text="var flScheduledEveryMinute = false;"/>
				<outline text=""/>
				<outline text="var appPrefs = { ">
					<outline text="flOneNotePerDay: true, typeInsertedNode: &quot;outline&quot;, flPlusIconMonthBased: true, flSimplifiedInsertPossible: true, //for opNewPost"/>
					<outline text="flConfirmTweets: true, maxTweetLength: 140, flCheckForReplies: false, flBeepIfNoReplies: false, lastSeenMyTweetId: undefined, ctMinBetwTweetReplyCheck: 5,"/>
					<outline text="lastLinkUrl: &quot;&quot;,"/>
					<outline text="lastInstantOutlineUrl: &quot;&quot;,"/>
					<outline text="fnameScriptsOutline: &quot;menubar.opml&quot;,"/>
					<outline text="fnameIconBarOutline: &quot;iconbar.opml&quot;,"/>
					<outline text="fnameBookmarksOutline: &quot;bookmarks.opml&quot;, //6/11/17 by DW"/>
					<outline text="flUploadJson: true,"/>
					<outline text="flFirstLaunch: true //5/18/17 by DW"/>
					<outline text="};"/>
					</outline>
				<outline text=""/>
				<outline text="//public outlines">
					<outline text="function outlineToJson (adrx, nameOutlineElement) {">
						<outline text="Changes" isComment="true">
							<outline text="10/20/14; 5:54:44 PM by DW">
								<outline text="Convert a &lt;source:outline&gt; structure from an RSS item into a jstruct."/>
								</outline>
							</outline>
						<outline text="var theOutline = new Object ();"/>
						<outline text="if (nameOutlineElement === undefined) {">
							<outline text="nameOutlineElement = &quot;source\\:outline&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="xmlGatherAttributes (adrx, theOutline);"/>
						<outline text="if (xmlHasSubs (adrx)) {">
							<outline text="theOutline.subs = [];"/>
							<outline text="$(adrx).children (nameOutlineElement).each (function () {">
								<outline text="theOutline.subs [theOutline.subs.length] = outlineToJson (this, nameOutlineElement);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (theOutline);"/>
						<outline text="}"/>
						</outline>
					<outline text="function callInstantOutlinerGlue (urlOutline, title, description, callback) {">
						<outline text="var apiUrl = &quot;http://instantoutliner.com/createglue?&quot;, flfirst = true;"/>
						<outline text="function pushparam (name, val) {">
							<outline text="if (!flfirst) {">
								<outline text="apiUrl += &quot;&amp;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="apiUrl += name + &quot;=&quot; + encodeURIComponent (val);"/>
							<outline text="flfirst = false;"/>
							<outline text="}"/>
							</outline>
						<outline text="pushparam (&quot;url&quot;, urlOutline);"/>
						<outline text="pushparam (&quot;title&quot;, title);"/>
						<outline text="pushparam (&quot;description&quot;, description);"/>
						<outline text="pushparam (&quot;socketserver&quot;, shell.getConfig ().urlChatLogSocket);"/>
						<outline text="readHttpFile (apiUrl, function (urlInstant) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (urlInstant);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function uploadPublicOpml (callback) { //5/3/17 by DW">
						<outline text="Changes" isComment="true">
							<outline text="5/18/17; 2:14:10 PM by DW">
								<outline text="If we upload the JSON file we were passing the URL of that file to the callback and that was being registered as the OPML URL which of course it's not. And when a subscriber would subscribe they would get an error. Not good! "/>
								</outline>
							<outline text="5/15/17; 6:12:26 PM by DW">
								<outline text="Only upload if the user is logged in."/>
								</outline>
							<outline text="5/3/17; 11:54:39 AM by DW">
								<outline text="If it's a public file, upload the OPML."/>
								</outline>
							</outline>
						<outline text="if (twIsTwitterConnected ()) {">
							<outline text="var headers = opGetHeaders ();"/>
							<outline text="function getOutlineJson () {">
								<outline text="var xstruct = $($.parseXML (getCurrentOpml ()));"/>
								<outline text="var adrbody = getXstuctBody (xstruct);"/>
								<outline text="var jstruct = {">
									<outline text="head: headers,"/>
									<outline text="body: outlineToJson (adrbody, &quot;outline&quot;)"/>
									<outline text="};"/>
									</outline>
								<outline text="var jsontext = jsonStringify (jstruct);"/>
								<outline text="return (jsontext);"/>
								<outline text="}"/>
								</outline>
							<outline text="if (getBoolean (headers.flPublic)) {">
								<outline text="var tab = shell.getCurrentTab (), remotePath = shell.getConfig ().outlinesPath + stringLastField (tab.f, &quot;/&quot;);"/>
								<outline text="twUploadFile (remotePath, getCurrentOpml (), &quot;text/xml&quot;, false, function (data) {">
									<outline text="var urlOpmlFile = data.url; //5/18/17 by DW"/>
									<outline text="console.log (&quot;uploadPublicOpml: data == &quot; + jsonStringify (data));"/>
									<outline text="var headers = opGetHeaders ();"/>
									<outline text="if (headers.urlPublic === undefined) {">
										<outline text="headers.urlPublic = urlOpmlFile;"/>
										<outline text="opSetHeaders (headers);"/>
										<outline text="}"/>
										</outline>
									<outline text="if (appPrefs.flUploadJson) {">
										<outline text="var jsontext = getOutlineJson (), jsonPath = stringPopExtension (remotePath) + &quot;.json&quot;;"/>
										<outline text="console.log (&quot;uploadPublicOpml: jsontext.length == &quot; + jsontext.length);"/>
										<outline text="twUploadFile (jsonPath, jsontext, &quot;application/json&quot;, false, function (data) {">
											<outline text="console.log (&quot;uploadPublicOpml: json url == &quot; + data.url);"/>
											<outline text="if (headers.urlJson === undefined) {">
												<outline text="headers.urlJson = data.url;"/>
												<outline text="opSetHeaders (headers);"/>
												<outline text="}"/>
												</outline>
											<outline text="if (callback !== undefined) {">
												<outline text="callback (urlOpmlFile);"/>
												<outline text="}"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="if (callback !== undefined) {">
											<outline text="callback (urlOpmlFile);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function makeOutlinePublic () {">
						<outline text="confirmDialog (&quot;Make the current outline public?&quot;, function () {">
							<outline text="var headers = opGetHeaders ();"/>
							<outline text="headers.flPublic = true;"/>
							<outline text="opSetHeaders (headers);"/>
							<outline text="uploadPublicOpml (function (urlPublicOpml) {">
								<outline text="var title = headers.title, description = headers.description;"/>
								<outline text="if (headers.longTitle !== undefined) {">
									<outline text="title = headers.longTitle;"/>
									<outline text="}"/>
									</outline>
								<outline text="if (description === undefined) {">
									<outline text="description = &quot;&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="callInstantOutlinerGlue (urlPublicOpml, title, description, function (urlInstant) {">
									<outline text="var headers = opGetHeaders ();"/>
									<outline text="headers.urInstant = urlInstant"/>
									<outline text="headers.urlUpdateSocket = shell.getConfig ().urlChatLogSocket;"/>
									<outline text="opSetHeaders (headers);"/>
									<outline text="askDialog (&quot;The public URL for this tab is:&quot;, urlInstant, &quot;&quot;, function (url, flcancel) {" created="Tue, 08 Jan 2013 01:26:19 GMT" pgfnum="16860">
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function viewOutlineOpml () {">
						<outline text="var headers = opGetHeaders ();"/>
						<outline text="if (headers.urlPublic === undefined) {">
							<outline text="alertDialog (&quot;Can't view the OPML because the file isn't public.&quot;)"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="shell.openUrl (headers.urlPublic);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function subscribeToInstantOutlineCommand () {">
						<outline text="askDialog (&quot;Enter the link for the outline:&quot;, appPrefs.lastInstantOutlineUrl, &quot;Enter some kind of URL to an instant outline&quot;, function (url, flcancel) {" created="Tue, 08 Jan 2013 01:26:19 GMT" pgfnum="16860">
							<outline text="if (!flcancel) {">
								<outline text="appPrefs.lastInstantOutlineUrl = url; //something like http://instantoutliner.com/1"/>
								<outline text="prefsChanged ();"/>
								<outline text="readHttpFile (url + &quot;?format=data&quot;, function (jsontext) {">
									<outline text="var jstruct = JSON.parse (jsontext);"/>
									<outline text="console.log (&quot;subscribeToInstantOutlineCommand: jsontext == &quot; + jsontext);"/>
									<outline text="var tab = shell.addInstantTab (url, jstruct);"/>
									<outline text="readHttpFile (tab.urlOpmlFile, function (opmltext) {">
										<outline text="tab.temp.idThisEditor = startEditor (opmltext);"/>
										<outline text="showEditor (true);"/>
										<outline text="});"/>
										</outline>
									<outline text=""/>
									<outline text=""/>
									<outline text="var ixtab = addInstantOutlineTab (url, jstruct), tab = appPrefs.myTabs [ixtab];" isComment="true"/>
									<outline text="readHttpFile (tab.urlOpmlFile, function (opmltext) {" isComment="true">
										<outline text="tab.opmltext = opmltext;" isComment="true" created="Wed, 16 Jan 2013 00:08:18 GMT" pgfnum="17213"/>
										<outline text="prefsChanged ();"/>
										<outline text="buildTabs ();"/>
										<outline text="tabClick (ixtab, opmltext);"/>
										<outline text="});"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//title-description dialog">
					<outline text="function closeTitleDescriptionDialog () {">
						<outline text="$(&quot;#idTitleDescriptionDialog&quot;).modal (&quot;hide&quot;); "/>
						<outline text="}"/>
						</outline>
					<outline text="function okTitleDescriptionDialog () {">
						<outline text="var title = $(&quot;#idShortTitle&quot;).val ();"/>
						<outline text="opSetTitle (title);"/>
						<outline text="var theHeaders = opGetHeaders ();"/>
						<outline text="theHeaders.longTitle = $(&quot;#idLongTitle&quot;).val ();"/>
						<outline text="theHeaders.description = $(&quot;#idDescription&quot;).val ();"/>
						<outline text="opSetHeaders (theHeaders);"/>
						<outline text="closeTitleDescriptionDialog ();"/>
						<outline text="var tab = appPrefs.myTabs [appPrefs.ixCurrentTab];"/>
						<outline text="tab.name = title;"/>
						<outline text="buildTabs ();"/>
						<outline text="}"/>
						</outline>
					<outline text="function titleDescriptionDialog () {">
						<outline text="var theHeaders = opGetHeaders ();"/>
						<outline text="function setDialogValue (id, val) {">
							<outline text="if (val === undefined) {">
								<outline text="val = &quot;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="$(&quot;#&quot; + id).val (val);"/>
							<outline text="}"/>
							</outline>
						<outline text="setDialogValue (&quot;idShortTitle&quot;, opGetTitle ());"/>
						<outline text="setDialogValue (&quot;idLongTitle&quot;, theHeaders.longTitle);"/>
						<outline text="setDialogValue (&quot;idDescription&quot;, theHeaders.description);"/>
						<outline text="$(&quot;#idTitleDescriptionDialog&quot;).modal (&quot;show&quot;); "/>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//scripts menu">
					<outline text="function getScriptsMenuFile () {">
						<outline text="var f = getUserDataFolder () + appPrefs.fnameScriptsOutline; "/>
						<outline text="return (f);"/>
						<outline text="}"/>
						</outline>
					<outline text="function deleteScriptsMenus () {" created="Mon, 22 Jul 2013 19:18:06 GMT" pgfnum="28124">
						<outline text="$(&quot;#idMainMenuList&quot;).children (&quot;li&quot;).each (function () {">
							<outline text="var id = $(this).attr (&quot;id&quot;);"/>
							<outline text="if (beginsWith (id, &quot;idScriptMenu&quot;)) {">
								<outline text="console.log (&quot;remove &quot; + id);" isComment="true"/>
								<outline text="$(this).remove ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Mon, 22 Jul 2013 19:18:34 GMT" pgfnum="28129"/>
						</outline>
					<outline text="function startScriptsMenu (opmltext) {">
						<outline text="function getOpmltext (callback) {">
							<outline text="if (opmltext !== undefined) {">
								<outline text="callback (opmltext);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var f = getScriptsMenuFile (); "/>
								<outline text="fs.readFile (f, function (err, data) {">
									<outline text="if (err) {">
										<outline text="console.log (&quot;startScriptsMenu: err.message == &quot; + err.message);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (data.toString ());"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="getOpmltext (function (opmltext) {">
							<outline text="xmlBuildMenusFromOpmltext (opmltext, &quot;idDocsMenu&quot;, function (theScript) {">
								<outline text="console.log (&quot;Callback from xmlBuildMenusFromOpmltext, theScript == &quot; + theScript);"/>
								<outline text="try {">
									<outline text="shell.runScript (theScript, function (val, errMsg) {">
										<outline text="if (errMsg !== undefined) {">
											<outline text="alertDialog (errMsg);"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (e) {">
									<outline text="alertDialog (&quot;Error running script: &quot; + e.message + &quot;.&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					</outline>
				<outline text="//bookmarks menu">
					<outline text="const idBookmarkMenuPrefix = &quot;idBookmarkMenu&quot;;"/>
					<outline text="const nameBookmarkIcon = &quot;bookmark&quot;;"/>
					<outline text=""/>
					<outline text="function getBookmarksMenuFile () {">
						<outline text="var f = getUserDataFolder () + appPrefs.fnameBookmarksOutline; "/>
						<outline text="return (f);"/>
						<outline text="}"/>
						</outline>
					<outline text="function addBookmark () {">
						<outline text="var tab = shell.getCurrentTab (), f = tab.f, title = tab.title;"/>
						<outline text="openBookmarksOpml ();"/>
						<outline text="confirmDialog (&quot;Add this file to the Bookmarks menu?&quot;, function () {">
							<outline text="opGo (up, infinity)"/>
							<outline text="opInsert (title, up);"/>
							<outline text="opSetOneAtt (&quot;f&quot;, f);"/>
							<outline text="opSetOneAtt (&quot;icon&quot;, nameBookmarkIcon);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function buildBookmarksMenu (opmltext) { " created="Wed, 17 Apr 2013 21:32:27 GMT" pgfnum="1863">
						<outline text="function openFileViaBookmark (f) {">
							<outline text="console.log (&quot;You want to open the file == &quot; + f);"/>
							<outline text="openOutlineInTab (f);"/>
							<outline text="}"/>
							</outline>
						<outline text="function getOpmltext (callback) {">
							<outline text="if (opmltext !== undefined) {">
								<outline text="callback (opmltext);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var f = getBookmarksMenuFile (); "/>
								<outline text="fs.readFile (f, function (err, data) {">
									<outline text="if (err) {">
										<outline text="console.log (&quot;buildBookmarksMenu: err.message == &quot; + err.message);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (data.toString ());"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="getOpmltext (function (opmltext) {">
							<outline text="var maxCharsMenuItem = 25, liDivider = &quot;&lt;li class=\&quot;divider\&quot;&gt;&lt;/li&gt;&quot;;"/>
							<outline text="$(&quot;#idBookmarksList&quot;).empty ();"/>
							<outline text="$(&quot;#idBookmarksList&quot;).append (&quot;&lt;li&gt;&lt;a onclick=\&quot;addBookmark ();\&quot;&gt;Add bookmark...&lt;/a&gt;&lt;/li&gt;&quot;);" created="Wed, 17 Apr 2013 21:48:57 GMT" pgfnum="1889"/>
							<outline text="$(&quot;#idBookmarksList&quot;).append (&quot;&lt;li&gt;&lt;a onclick=\&quot;editBookmarks ();\&quot;&gt;Edit bookmarks...&lt;/a&gt;&lt;/li&gt;&quot;);" isComment="true" created="Wed, 17 Apr 2013 21:48:57 GMT" pgfnum="1889"/>
							<outline text="$(&quot;#idBookmarksList&quot;).append (liDivider);" created="Wed, 17 Apr 2013 21:48:57 GMT" pgfnum="1889"/>
							<outline text="var xstruct = $($.parseXML (opmltext));"/>
							<outline text="var adrbody = getXstuctBody (xstruct);"/>
							<outline text=""/>
							<outline text="function getMenu (adrMenuInOutline, whereToAttach, flSubMenu) {">
								<outline text="console.log (&quot;getMenu: flSubMenu == &quot; + flSubMenu + &quot;, whereToAttach == &quot; + whereToAttach);"/>
								<outline text="xmlOneLevelVisit (adrMenuInOutline, function (adrsub) {">
									<outline text="if (!xmlIsComment (adrsub)) {">
										<outline text="var textatt = trimWhitespace (xmlGetAttribute (adrsub, &quot;text&quot;));" created="Fri, 29 Nov 2013 01:52:48 GMT" pgfnum="32555"/>
										<outline text="if (textatt == &quot;-&quot;) {">
											<outline text="whereToAttach.append (liDivider);" created="Wed, 17 Apr 2013 21:48:57 GMT" pgfnum="1889"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="if (xmlHasSubs (adrsub)) {">
												<outline text="var liMenuItem = $(&quot;&lt;li class=\&quot;dropdown-submenu\&quot;&gt;&lt;a href=\&quot;#\&quot;&gt;&quot; + textatt + &quot;&lt;/a&gt;&lt;/li&gt;&quot;);" created="Wed, 17 Apr 2013 21:50:02 GMT" pgfnum="1893"/>
												<outline text="var ulSubMenu = $(&quot;&lt;ul class=\&quot;dropdown-menu\&quot;&gt;&lt;/ul&gt;&quot;);" created="Wed, 17 Apr 2013 21:45:06 GMT" pgfnum="1876"/>
												<outline text="whereToAttach.append (liMenuItem);"/>
												<outline text="getMenu (adrsub, ulSubMenu, true);"/>
												<outline text="liMenuItem.append (ulSubMenu);"/>
												<outline text="}"/>
												</outline>
											<outline text="else {">
												<outline text="var liMenuItem = $(&quot;&lt;li&gt;&lt;/li&gt;&quot;);" created="Wed, 17 Apr 2013 21:50:02 GMT" pgfnum="1893"/>
												<outline text="var fileatt = xmlGetAttribute (adrsub, &quot;f&quot;);" created="Fri, 29 Nov 2013 01:52:48 GMT" pgfnum="32555"/>
												<outline text="var menuItemNameLink = $(&quot;&lt;a&gt;&lt;/a&gt;&quot;);" created="Wed, 17 Apr 2013 21:50:16 GMT" pgfnum="1894"/>
												<outline text="//set text of menu item">
													<outline text="var itemtext = maxLengthString (textatt, maxCharsMenuItem);"/>
													<outline text="if (itemtext.length === 0) {">
														<outline text="itemtext = &quot;&amp;nbsp;&quot;;"/>
														<outline text="}"/>
														</outline>
													<outline text="menuItemNameLink.html (itemtext);" created="Wed, 17 Apr 2013 21:50:29 GMT" pgfnum="1895"/>
													</outline>
												<outline text="menuItemNameLink.click (function (event) { " created="Wed, 17 Apr 2013 22:09:21 GMT" pgfnum="1908">
													<outline text="event.preventDefault ();" created="Wed, 17 Apr 2013 22:09:28 GMT" pgfnum="1909"/>
													<outline text="if (fileatt !== undefined) {">
														<outline text="openFileViaBookmark (fileatt);"/>
														<outline text="}"/>
														</outline>
													<outline text="});" created="Wed, 17 Apr 2013 22:09:28 GMT" pgfnum="1910"/>
													</outline>
												<outline text="liMenuItem.append (menuItemNameLink);" created="Wed, 17 Apr 2013 21:50:39 GMT" pgfnum="1896"/>
												<outline text="whereToAttach.append (liMenuItem);" created="Wed, 17 Apr 2013 21:48:57 GMT" pgfnum="1889"/>
												<outline text="}"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="return (true);" created="Mon, 03 Mar 2014 23:23:33 GMT" pgfnum="38269"/>
									<outline text="});" created="Mon, 03 Mar 2014 23:16:53 GMT" pgfnum="38262"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="getMenu (adrbody, $(&quot;#idBookmarksList&quot;), false);"/>
							<outline text=""/>
							<outline text="$(&quot;#idBookmarksMenu&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Wed, 17 Apr 2013 21:35:26 GMT" pgfnum="1865"/>
						</outline>
					</outline>
				<outline text="//icon bar">
					<outline text="var ctIconBarIcons = 0;"/>
					<outline text=""/>
					<outline text="function getIconBarFile () {">
						<outline text="var f = getUserDataFolder () + appPrefs.fnameIconBarOutline; "/>
						<outline text="return (f);"/>
						<outline text="}"/>
						</outline>
					<outline text="function setupIconHandlers () {">
						<outline text="$(&quot;.iIcon&quot;).mouseenter (function () {">
							<outline text="console.log (&quot;mouseenter&quot;);" isComment="true"/>
							<outline text="$(this).css (&quot;color&quot;, &quot;dimgray&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="$(&quot;.iIcon&quot;).mouseleave (function () {">
							<outline text="console.log (&quot;mouseleave&quot;);" isComment="true"/>
							<outline text="$(this).css (&quot;color&quot;, &quot;silver&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="$(&quot;.iIcon&quot;).mousedown (function () {">
							<outline text="console.log (&quot;mousedown&quot;);" isComment="true"/>
							<outline text="$(this).css (&quot;color&quot;, &quot;black&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="$(&quot;.iIcon&quot;).mouseup (function () {">
							<outline text="console.log (&quot;mouseup&quot;);" isComment="true"/>
							<outline text="$(this).css (&quot;color&quot;, &quot;dimgray&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function xmlBuildIconBarFromOpmltext (opmltext, idIconToInsertAfter, evalCallback) {">
						<outline text="Changes" isComment="true">
							<outline text="1/22/17; 10:34:20 PM by DW">
								<outline text="Added newMenuCommand callback. "/>
								</outline>
							<outline text="1/10/17; 11:05:03 AM by DW">
								<outline text="Copied from littleOutliner project."/>
								</outline>
							</outline>
						<outline text="var xstruct = $($.parseXML (opmltext)), ctScriptMenus = 0;"/>
						<outline text="var adrbody = getXstuctBody (xstruct);" created="Wed, 30 Oct 2013 17:54:25 GMT" pgfnum="30678"/>
						<outline text="xmlOneLevelVisit (adrbody, function (adricon) {" created="Fri, 08 Nov 2013 17:59:34 GMT" pgfnum="31269">
							<outline text=""/>
							<outline text="function getTitleAtt () {">
								<outline text="var att = xmlGetAttribute (adricon, &quot;title&quot;);"/>
								<outline text="if (att === undefined) {">
									<outline text="att = &quot;&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="return (att);"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="if (!xmlIsComment (adricon)) {">
								<outline text="var iconName = xmlGetTextAtt (adricon);"/>
								<outline text="console.log (&quot;xmlBuildIconBarFromOpmltext: iconName == &quot; + iconName);"/>
								<outline text="var idThisIcon = &quot;idIcon&quot; + ++ctIconBarIcons;"/>
								<outline text="var divIcon = $(&quot;&lt;div&gt;&lt;/div&gt;&quot;);"/>
								<outline text="divIcon.addClass (&quot;divIcon&quot;);"/>
								<outline text="divIcon.attr (&quot;id&quot;, idThisIcon);" created="Wed, 17 Apr 2013 21:46:17 GMT" pgfnum="1880"/>
								<outline text=""/>
								<outline text=""/>
								<outline text="var subtext = trimWhitespace (xmlGetSubText (adricon));" created="Wed, 08 Jan 2014 16:34:38 GMT" pgfnum="35513"/>
								<outline text="if (subtext.length &gt; 0) {">
									<outline text="divIcon.data (&quot;script&quot;, subtext);" created="Wed, 17 Apr 2013 22:03:29 GMT" pgfnum="1906"/>
									<outline text=""/>
									<outline text="var whenCreated = xmlGetAttribute (adricon, &quot;created&quot;); //1/22/17 by DW"/>
									<outline text="if (whenCreated !== undefined) {">
										<outline text="divIcon.data (&quot;created&quot;, whenCreated);" created="Wed, 17 Apr 2013 22:03:29 GMT" pgfnum="1906"/>
										<outline text="}"/>
										</outline>
									<outline text=""/>
									<outline text="divIcon.click (function (event) { " created="Wed, 17 Apr 2013 22:09:21 GMT" pgfnum="1908">
										<outline text="var s = $(this).data (&quot;script&quot;);" created="Sat, 27 Jul 2013 15:26:26 GMT" pgfnum="28348"/>
										<outline text="event.preventDefault ();" created="Wed, 17 Apr 2013 22:09:28 GMT" pgfnum="1909"/>
										<outline text="if (evalCallback !== undefined) {">
											<outline text="evalCallback (s, this); "/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="eval (s);" created="Wed, 17 Apr 2013 22:09:34 GMT" pgfnum="1911"/>
											<outline text="}"/>
											</outline>
										<outline text="});" created="Wed, 17 Apr 2013 22:09:28 GMT" pgfnum="1910"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text=""/>
								<outline text=""/>
								<outline text=""/>
								<outline text="var iconLink = $(&quot;&lt;a&gt;&lt;/a&gt;&quot;);" created="Wed, 17 Apr 2013 21:46:46 GMT" pgfnum="1882"/>
								<outline text="iconLink.attr (&quot;href&quot;, &quot;#&quot;);" created="Wed, 17 Apr 2013 21:57:47 GMT" pgfnum="1900"/>
								<outline text="iconLink.attr (&quot;data-toggle&quot;, &quot;tooltip&quot;);" created="Wed, 17 Apr 2013 21:57:47 GMT" pgfnum="1900"/>
								<outline text="iconLink.attr (&quot;title&quot;, getTitleAtt ());" created="Wed, 17 Apr 2013 21:57:47 GMT" pgfnum="1900"/>
								<outline text="iconLink.html (&quot;&lt;i class=\&quot;fa fa-&quot; + stringLower (iconName) + &quot; iIcon\&quot;&gt;&lt;/i&gt;&quot;);" created="Wed, 17 Apr 2013 21:57:47 GMT" pgfnum="1900"/>
								<outline text=""/>
								<outline text="divIcon.append (iconLink);"/>
								<outline text="divIcon.insertAfter (&quot;#&quot; + idIconToInsertAfter);"/>
								<outline text="idIconToInsertAfter = idThisIcon;"/>
								<outline text="}"/>
								</outline>
							<outline text="return (true); //keep visiting" created="Sat, 09 Nov 2013 17:08:18 GMT" pgfnum="31410"/>
							<outline text="});" created="Fri, 08 Nov 2013 17:59:53 GMT" pgfnum="31270"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function deleteUserIcons () {">
						<outline text="Changes" isComment="true">
							<outline text="5/31/17; 12:59:35 PM by DW">
								<outline text="Loop over the icons in reverse order. Delete them until you reach the first hard-wired icon, and stop there."/>
								</outline>
							</outline>
						<outline text="var fldone = false;"/>
						<outline text="$($(&quot;#idIconList&quot;).children ().get ().reverse ()).each (function () {">
							<outline text="var id = $(this).attr (&quot;id&quot;);"/>
							<outline text="if (id == &quot;idIconToInsertAfter&quot;) {">
								<outline text="fldone = true;"/>
								<outline text="}"/>
								</outline>
							<outline text="if (!fldone) {">
								<outline text="$(this).remove ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function startIconBar (opmltext) {">
						<outline text="function getOpmltext (callback) {">
							<outline text="if (opmltext !== undefined) {">
								<outline text="callback (opmltext);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var f = getIconBarFile (); "/>
								<outline text="fs.readFile (f, function (err, data) {">
									<outline text="if (err) {">
										<outline text="console.log (&quot;startIconBar: err.message == &quot; + err.message);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (data.toString ());"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="getOpmltext (function (opmltext) {">
							<outline text="console.log (opmltext);"/>
							<outline text="xmlBuildIconBarFromOpmltext (opmltext, &quot;idIconToInsertAfter&quot;, function (theScript) {">
								<outline text="console.log (&quot;Callback from xmlBuildIconBarFromOpmltext, theScript == &quot; + theScript);"/>
								<outline text="try {">
									<outline text="shell.runScript (theScript, function (val, errMsg) {">
										<outline text="if (errMsg !== undefined) {">
											<outline text="alertDialog (errMsg);"/>
											<outline text="}"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (e) {">
									<outline text="alertDialog (&quot;Error running script: &quot; + e.message + &quot;.&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					</outline>
				<outline text="//render mode">
					<outline text="function getRenderMode () {" created="Mon, 12 May 2014 16:12:46 GMT" pgfnum="41563">
						<outline text="return ($(opGetActiveOutliner ()).concord ().op.getRenderMode ());" created="Mon, 12 May 2014 16:13:06 GMT" pgfnum="41565"/>
						<outline text="}" created="Mon, 12 May 2014 16:12:51 GMT" pgfnum="41564"/>
						</outline>
					<outline text="function toggleRenderMode () {" created="Mon, 12 May 2014 16:09:05 GMT" pgfnum="41561">
						<outline text="$(opGetActiveOutliner ()).concord ().op.setRenderMode (!getRenderMode ());" created="Mon, 04 Mar 2013 00:52:00 GMT" pgfnum="19670"/>
						<outline text="}" created="Mon, 12 May 2014 16:09:12 GMT" pgfnum="41562"/>
						</outline>
					<outline text="function updateRenderModeCommandString () {" created="Sun, 28 Jul 2013 18:40:49 GMT" pgfnum="28374">
						<outline text="var s = (getRenderMode ()) ? &quot;Visible markup&quot; : &quot;Invisible markup&quot;; //6/26/16 by DW" created="Mon, 04 Mar 2013 00:52:00 GMT" pgfnum="19670"/>
						<outline text="$(&quot;#idRenderModeCommandString&quot;).html (s);" created="Wed, 03 Apr 2013 16:41:18 GMT" pgfnum="1226"/>
						<outline text="}" created="Sun, 28 Jul 2013 18:41:00 GMT" pgfnum="28375"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text="function myNewPost (s, flSetIcon, attsForNewNode) { //1/26/15 by DW" isComment="true" created="Mon, 04 Mar 2013 01:19:19 GMT" pgfnum="19678">
					<outline text="Changes" isComment="true" created="Sat, 09 Mar 2013 23:27:03 GMT" pgfnum="20088">
						<outline text="6/11/17; 5:17:21 PM by DW">
							<outline text="if appPrefs.flSimplifiedInsertPossible is true, we look to see if the bar cursor is already pointing in the list of new items for the current day. If so, we just insert the new item down from the cursor. Otherwise the new item would go at the top of the list, which is usually &lt;i&gt;not&lt;/i&gt; what you want. "/>
							</outline>
						<outline text="2/22/15; 4:30:33 PM by DW">
							<outline text="New pref appPrefs.flPlusIconMonthBased. If true, we don't look for the year, instead we look for the month. This lets us shave a whole level off the liveblog display, and get back a bunch of horizontal space. The year level isn't doing us a bunch of good, imho."/>
							</outline>
						<outline text="12/22/14; 10:42:23 AM by DW">
							<outline text="If we're creating more than one headline make sure they all have different &quot;created&quot; attributes."/>
							</outline>
						<outline text="6/24/14; 1:30:44 PM by DW" created="Tue, 24 Jun 2014 17:30:42 GMT" pgfnum="42446">
							<outline text="New optional param, atts. If specified we set the atts of the created headline. " created="Tue, 24 Jun 2014 17:30:44 GMT" pgfnum="42447"/>
							</outline>
						<outline text="3/9/13; 6:27:07 PM by DW" created="Sat, 09 Mar 2013 23:27:05 GMT" pgfnum="20089">
							<outline text="New optional param, s -- if specified, we insert that text instead of creating an empty headline." created="Sat, 09 Mar 2013 23:27:08 GMT" pgfnum="20090"/>
							</outline>
						</outline>
					<outline text="var nameUpdatedIcon = &quot;bolt&quot;, insertedNodeType, nextCreatedAtt;" created="Thu, 13 Jun 2013 23:52:12 GMT" pgfnum="26142"/>
					<outline text="var now = new Date (), yearstring = now.getFullYear (), ms = monthToString (), monthstring = ms + &quot; &quot; + yearstring;" created="Thu, 28 Feb 2013 23:49:58 GMT" pgfnum="19378"/>
					<outline text="var daystring = ms + &quot; &quot; + now.getDate (), flTypeSet = false;"/>
					<outline text="function doInsertForNewPost (s, dir) { //12/22/14 by DW">
						<outline text="var attstring = nextCreatedAtt.toUTCString ();"/>
						<outline text="opInsert (s, dir);" created="Fri, 08 Mar 2013 15:20:23 GMT" pgfnum="19933"/>
						<outline text="opSetOneAtt (&quot;created&quot;, attstring);"/>
						<outline text="nextCreatedAtt = new Date (Number (nextCreatedAtt) + 1000); //make sure the timestamps are different"/>
						<outline text="}"/>
						</outline>
					<outline text="function setInsertedNodeType () { //7/14/13 by DW" created="Sun, 14 Jul 2013 18:47:39 GMT" pgfnum="27915">
						<outline text="var theNode = opGetBarCursor ();"/>
						<outline text="insertedNodeType = appPrefs.typeInsertedNode; //default" created="Sun, 14 Jul 2013 18:47:52 GMT" pgfnum="27920"/>
						<outline text="" created="Tue, 24 Jun 2014 17:24:28 GMT" pgfnum="42442"/>
						<outline text="if (insertedNodeType == undefined) { //6/24/14 by DW" created="Tue, 24 Jun 2014 17:24:28 GMT" pgfnum="42443">
							<outline text="insertedNodeType = &quot;&quot;;" created="Tue, 24 Jun 2014 17:24:35 GMT" pgfnum="42444"/>
							<outline text="}" created="Tue, 24 Jun 2014 17:24:37 GMT" pgfnum="42445"/>
							</outline>
						<outline text="" created="Mon, 06 Jan 2014 18:48:34 GMT" pgfnum="35448"/>
						<outline text="var headers = opGetHeaders () //1/6/14 by DW;" created="Tue, 14 May 2013 14:01:08 GMT" pgfnum="23828"/>
						<outline text="if ((headers.typeInsertedNode != undefined) &amp;&amp; (headers.typeInsertedNode.length &gt; 0)) { " created="Tue, 14 May 2013 14:01:22 GMT" pgfnum="23831">
							<outline text="insertedNodeType = headers.typeInsertedNode; " created="Sun, 14 Jul 2013 18:47:52 GMT" pgfnum="27920"/>
							<outline text="}" created="Tue, 14 May 2013 14:01:32 GMT" pgfnum="23832"/>
							</outline>
						<outline text="" created="Mon, 06 Jan 2014 18:48:35 GMT" pgfnum="35452"/>
						<outline text="theNode.visitToSummit (function (headline) { //look for a parent with an insertedNodeType att" created="Sun, 30 Jun 2013 10:51:41 GMT" pgfnum="27383">
							<outline text="var type = headline.attributes.getOne (&quot;insertedNodeType&quot;);" created="Sun, 30 Jun 2013 10:54:01 GMT" pgfnum="27389"/>
							<outline text="if (type != undefined) {" created="Sun, 30 Jun 2013 10:54:19 GMT" pgfnum="27390">
								<outline text="insertedNodeType = type;" created="Sun, 30 Jun 2013 10:54:43 GMT" pgfnum="27392"/>
								<outline text="return (false);" created="Sun, 30 Jun 2013 10:54:49 GMT" pgfnum="27393"/>
								<outline text="}" created="Sun, 30 Jun 2013 10:54:26 GMT" pgfnum="27391"/>
								</outline>
							<outline text="return (true); //keep visiting" created="Sun, 30 Jun 2013 10:55:28 GMT" pgfnum="27394"/>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Sun, 14 Jul 2013 18:47:49 GMT" pgfnum="27919"/>
						</outline>
					<outline text="function setCalendarHomeAtts () { //7/20/13 by DW" created="Sat, 20 Jul 2013 19:30:10 GMT" pgfnum="28064">
						<outline text="var now = new Date (), yearstring = now.getFullYear ();" created="Mon, 03 Jun 2013 11:23:46 GMT" pgfnum="25015"/>
						<outline text="if (opGetOneAtt (&quot;name&quot;) == undefined) { //6/6/13 by DW">
							<outline text="opSetOneAtt (&quot;name&quot;, yearstring);"/>
							<outline text="}" created="Thu, 06 Jun 2013 18:55:21 GMT" pgfnum="25293"/>
							</outline>
						<outline text="if (opGetOneAtt (&quot;icon&quot;) == undefined) { //6/11/13 by DW" created="Mon, 03 Jun 2013 11:31:15 GMT" pgfnum="25023">
							<outline text="opSetOneAtt (&quot;icon&quot;, &quot;calendar&quot;);"/>
							<outline text="}" created="Mon, 03 Jun 2013 11:32:31 GMT" pgfnum="25026"/>
							</outline>
						<outline text="if (opGetOneAtt (&quot;type&quot;) == &quot;calendar&quot;) { //6/11/13 by DW" created="Mon, 03 Jun 2013 11:31:15 GMT" pgfnum="25023">
							<outline text="opDeleteAtt (&quot;type&quot;);"/>
							<outline text="}" created="Mon, 03 Jun 2013 11:32:31 GMT" pgfnum="25026"/>
							</outline>
						<outline text="}" created="Sat, 20 Jul 2013 19:30:19 GMT" pgfnum="28065"/>
						</outline>
					<outline text="function findYearAtTopLevel () { //6/3/13 by DW" created="Mon, 03 Jun 2013 11:21:37 GMT" pgfnum="25007">
						<outline text="Changes" isComment="true" created="Sat, 09 Mar 2013 23:27:03 GMT" pgfnum="20088">
							<outline text="6/3/13; 7:30:06 AM by DW" created="Sat, 09 Mar 2013 23:27:05 GMT" pgfnum="20089">
								<outline text="Created. Look for a node at the top level that contains the year, or has a type == calendar." created="Sat, 09 Mar 2013 23:27:08 GMT" pgfnum="20090"/>
								</outline>
							</outline>
						<outline text="var now = new Date (), yearstring = now.getFullYear (), type;" created="Mon, 03 Jun 2013 11:23:46 GMT" pgfnum="25015"/>
						<outline text="opFirstSummit ();" created="Thu, 28 Feb 2013 23:45:52 GMT" pgfnum="19376"/>
						<outline text="while (true) {" created="Mon, 03 Jun 2013 11:20:39 GMT" pgfnum="25000">
							<outline text="if (opGetLineText () == yearstring) {" created="Mon, 03 Jun 2013 11:21:05 GMT" pgfnum="25004">
								<outline text="break;" created="Mon, 03 Jun 2013 11:22:04 GMT" pgfnum="25011"/>
								<outline text="}" created="Mon, 03 Jun 2013 11:21:13 GMT" pgfnum="25005"/>
								</outline>
							<outline text="if (!opGo (down, 1)) {" created="Mon, 03 Jun 2013 11:22:13 GMT" pgfnum="25012">
								<outline text="opFirstSummit ();" created="Thu, 28 Feb 2013 23:45:52 GMT" pgfnum="19376"/>
								<outline text="doInsertForNewPost (yearstring, up);" created="Fri, 08 Mar 2013 15:20:23 GMT" pgfnum="19933"/>
								<outline text="break;" created="Mon, 03 Jun 2013 11:26:26 GMT" pgfnum="25016"/>
								<outline text="}" created="Mon, 03 Jun 2013 11:22:27 GMT" pgfnum="25014"/>
								</outline>
							<outline text="}" created="Mon, 03 Jun 2013 11:20:51 GMT" pgfnum="25003"/>
							</outline>
						<outline text="setCalendarHomeAtts ();"/>
						<outline text="}" created="Mon, 03 Jun 2013 11:21:47 GMT" pgfnum="25010"/>
						</outline>
					<outline text="function findYearAnywhere () { //7/20/13 by DW" created="Sat, 20 Jul 2013 19:21:37 GMT" pgfnum="28050">
						<outline text="var now = new Date (), yearstring = now.getFullYear (), flfound = false;" created="Mon, 03 Jun 2013 11:23:46 GMT" pgfnum="25015"/>
						<outline text="opVisitAll (function (headline) {" created="Sat, 20 Jul 2013 19:09:24 GMT" pgfnum="28030">
							<outline text="if (headline.getLineText () == yearstring) {" created="Thu, 23 May 2013 21:04:05 GMT" pgfnum="24393">
								<outline text="expandToCursor (headline);" created="Sat, 20 Jul 2013 19:27:44 GMT" pgfnum="28058"/>
								<outline text="opSetCursor (headline.getCursor ());"/>
								<outline text="flfound = true;" created="Sat, 20 Jul 2013 19:29:07 GMT" pgfnum="28061"/>
								<outline text="return (false)" created="Sat, 20 Jul 2013 19:27:52 GMT" pgfnum="28059"/>
								<outline text="}" created="Sat, 20 Jul 2013 19:26:27 GMT" pgfnum="28057"/>
								</outline>
							<outline text="return (true); //keep looking" created="Sat, 20 Jul 2013 19:28:04 GMT" pgfnum="28060"/>
							<outline text="});" created="Sat, 20 Jul 2013 19:14:08 GMT" pgfnum="28044"/>
							</outline>
						<outline text="if (!flfound) {" created="Sat, 20 Jul 2013 19:29:21 GMT" pgfnum="28062">
							<outline text="opFirstSummit ();" created="Thu, 28 Feb 2013 23:45:52 GMT" pgfnum="19376"/>
							<outline text="doInsertForNewPost (yearstring, up);" created="Fri, 08 Mar 2013 15:20:23 GMT" pgfnum="19933"/>
							<outline text="}" created="Sat, 20 Jul 2013 19:29:26 GMT" pgfnum="28063"/>
							</outline>
						<outline text="setCalendarHomeAtts ();"/>
						<outline text="}" created="Sat, 20 Jul 2013 19:22:04 GMT" pgfnum="28056"/>
						</outline>
					<outline text="function findMonthAnywhere () { //2/22/15 by DW">
						<outline text="var flfound = false;" created="Mon, 03 Jun 2013 11:23:46 GMT" pgfnum="25015"/>
						<outline text="opVisitAll (function (headline) {" created="Sat, 20 Jul 2013 19:09:24 GMT" pgfnum="28030">
							<outline text="if (headline.getLineText () == monthstring) {" created="Thu, 23 May 2013 21:04:05 GMT" pgfnum="24393">
								<outline text="expandToCursor (headline);" created="Sat, 20 Jul 2013 19:27:44 GMT" pgfnum="28058"/>
								<outline text="opSetCursor (headline.getCursor ());"/>
								<outline text="flfound = true;" created="Sat, 20 Jul 2013 19:29:07 GMT" pgfnum="28061"/>
								<outline text="return (false); //stop looking" created="Sat, 20 Jul 2013 19:27:52 GMT" pgfnum="28059"/>
								<outline text="}" created="Sat, 20 Jul 2013 19:26:27 GMT" pgfnum="28057"/>
								</outline>
							<outline text="return (true); //keep looking" created="Sat, 20 Jul 2013 19:28:04 GMT" pgfnum="28060"/>
							<outline text="});" created="Sat, 20 Jul 2013 19:14:08 GMT" pgfnum="28044"/>
							</outline>
						<outline text="if (!flfound) {" created="Sat, 20 Jul 2013 19:29:21 GMT" pgfnum="28062">
							<outline text="opFirstSummit ();" created="Thu, 28 Feb 2013 23:45:52 GMT" pgfnum="19376"/>
							<outline text="doInsertForNewPost (monthstring, up);" created="Fri, 08 Mar 2013 15:20:23 GMT" pgfnum="19933"/>
							<outline text="opSetOneAtt (&quot;name&quot;, innerCaseName (monthstring)); //4/23/15 by DW"/>
							<outline text="opSetOneAtt (&quot;name&quot;, padWithZeros (now.getMonth () + 1, 2));" isComment="true"/>
							<outline text="}" created="Sat, 20 Jul 2013 19:29:26 GMT" pgfnum="28063"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function setNewPostType (flSetIcon) { //6/11/13 by DW" created="Tue, 11 Jun 2013 15:05:22 GMT" pgfnum="25747">
						<outline text="if (insertedNodeType.length &gt; 0) {" created="Thu, 06 Jun 2013 19:07:40 GMT" pgfnum="25304">
							<outline text="opSetOneAtt (&quot;type&quot;, insertedNodeType);"/>
							<outline text="}" created="Thu, 06 Jun 2013 19:08:18 GMT" pgfnum="25310"/>
							</outline>
						<outline text="else {" created="Thu, 06 Jun 2013 19:07:57 GMT" pgfnum="25308">
							<outline text="if (flSetIcon) {" created="Fri, 14 Jun 2013 18:44:52 GMT" pgfnum="26209">
								<outline text="opSetOneAtt (&quot;icon&quot;, nameUpdatedIcon);"/>
								<outline text="}" created="Fri, 14 Jun 2013 18:44:57 GMT" pgfnum="26210"/>
								</outline>
							<outline text="}" created="Thu, 06 Jun 2013 19:08:00 GMT" pgfnum="25309"/>
							</outline>
						<outline text="if ((appPrefs.flPlusIconAddsFeedItem != undefined) &amp;&amp; appPrefs.flPlusIconAddsFeedItem) { //6/20/13 by DW" created="Thu, 20 Jun 2013 16:42:00 GMT" pgfnum="26837">
							<outline text="opSetOneAtt (&quot;isFeedItem&quot;, &quot;true&quot;);"/>
							<outline text="}" created="Thu, 20 Jun 2013 16:43:04 GMT" pgfnum="26840"/>
							</outline>
						<outline text="if ((appPrefs.flInsertComments != undefined) &amp;&amp; appPrefs.flInsertComments) { //7/12/13 by DW -- insert as a comment if pref is set and it's a named outline" created="Fri, 12 Jul 2013 13:32:50 GMT" pgfnum="27875">
							<outline text="var headers = getActiveHeaders ();" created="Tue, 14 May 2013 14:01:08 GMT" pgfnum="23828"/>
							<outline text="if (headers.link != undefined) { //it's a named outline" created="Tue, 14 May 2013 14:01:22 GMT" pgfnum="23831">
								<outline text="opSetOneAtt (&quot;isComment&quot;, &quot;true&quot;);" isComment="true"/>
								<outline text="op.makeComment (); //7/28/13 by DW"/>
								<outline text="}" created="Tue, 14 May 2013 14:01:32 GMT" pgfnum="23832"/>
								</outline>
							<outline text="}" created="Fri, 12 Jul 2013 13:33:06 GMT" pgfnum="27879"/>
							</outline>
						<outline text="}" created="Tue, 11 Jun 2013 15:05:31 GMT" pgfnum="25751"/>
						</outline>
					<outline text="function didSimplifiedInsert () { //6/11/17 by DW">
						<outline text="var origcursor = opGetCursor ();"/>
						<outline text="if (opGo (left, 1)) {">
							<outline text="if (opGetOneAtt (&quot;name&quot;) == now.getDate ()) {">
								<outline text="if (opGo (left, 1)) {">
									<outline text="if (opGetOneAtt (&quot;name&quot;) == innerCaseName (monthstring)) {">
										<outline text="opSetCursor (origcursor);"/>
										<outline text="doInsertForNewPost (&quot;&quot;, down);"/>
										<outline text="setNewPostType ();"/>
										<outline text="opSetTextMode (true);" created="Thu, 28 Feb 2013 23:51:54 GMT" pgfnum="19380"/>
										<outline text="return (true);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="nextCreatedAtt = now; //12/22/14 by DW" created="Tue, 11 Jun 2013 15:06:51 GMT" pgfnum="25754"/>
					<outline text="setInsertedNodeType (); //7/14/13 by DW" created="Sun, 14 Jul 2013 18:53:31 GMT" pgfnum="27921"/>
					<outline text="if (flSetIcon == undefined) {" created="Fri, 14 Jun 2013 18:44:23 GMT" pgfnum="26206">
						<outline text="flSetIcon = true;" created="Fri, 14 Jun 2013 18:44:35 GMT" pgfnum="26208"/>
						<outline text="}" created="Fri, 14 Jun 2013 18:44:28 GMT" pgfnum="26207"/>
						</outline>
					<outline text="flExpandCallbackDisabled = true; //3/14/13 by DW" created="Thu, 14 Mar 2013 16:22:39 GMT" pgfnum="20396"/>
					<outline text=""/>
					<outline text="if (getBoolean (appPrefs.flSimplifiedInsertPossible)) { //6/11/17 by DW">
						<outline text="if (didSimplifiedInsert ()) {">
							<outline text="return;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="" created="Mon, 03 Jun 2013 11:26:52 GMT" pgfnum="25017"/>
					<outline text="if (getBoolean (appPrefs.flPlusIconMonthBased)) { //2/22/15 by DW">
						<outline text="findMonthAnywhere (); "/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="findYearAnywhere (); //7/20/13 by DW" created="Sat, 20 Jul 2013 19:31:18 GMT" pgfnum="28067"/>
						<outline text="//do the month" created="Thu, 06 Jun 2013 18:57:20 GMT" pgfnum="25294">
							<outline text="if (opHasSubs ()) { " created="Fri, 08 Mar 2013 15:26:11 GMT" pgfnum="19938">
								<outline text="opExpand ();" created="Fri, 08 Mar 2013 15:24:16 GMT" pgfnum="19936"/>
								<outline text="opGo (right, 1);" created="Fri, 08 Mar 2013 15:29:13 GMT" pgfnum="19944"/>
								<outline text="if (opGetLineText () != monthstring) {" created="Fri, 08 Mar 2013 15:29:19 GMT" pgfnum="19945">
									<outline text="doInsertForNewPost (monthstring, up);" created="Fri, 08 Mar 2013 15:20:23 GMT" pgfnum="19933"/>
									<outline text="}" created="Fri, 08 Mar 2013 15:30:57 GMT" pgfnum="19946"/>
									</outline>
								<outline text="}" created="Fri, 08 Mar 2013 15:36:21 GMT" pgfnum="19953"/>
								</outline>
							<outline text="else {" created="Fri, 08 Mar 2013 15:31:31 GMT" pgfnum="19947">
								<outline text="doInsertForNewPost (monthstring, right);" created="Fri, 08 Mar 2013 15:20:23 GMT" pgfnum="19933"/>
								<outline text="}" created="Fri, 08 Mar 2013 15:31:33 GMT" pgfnum="19948"/>
								</outline>
							<outline text="if (opGetOneAtt (&quot;name&quot;) == undefined) { //6/6/13 by DW">
								<outline text="opSetOneAtt (&quot;name&quot;, padWithZeros (now.getMonth () + 1, 2));"/>
								<outline text="}" created="Thu, 06 Jun 2013 18:55:21 GMT" pgfnum="25293"/>
								</outline>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="//do the day" created="Fri, 08 Mar 2013 15:32:15 GMT" pgfnum="19949">
						<outline text="if (opHasSubs ()) { " created="Fri, 08 Mar 2013 15:26:11 GMT" pgfnum="19938">
							<outline text="opExpand ();" created="Fri, 08 Mar 2013 15:24:16 GMT" pgfnum="19936"/>
							<outline text="opGo (right, 1);" created="Fri, 08 Mar 2013 15:29:13 GMT" pgfnum="19944"/>
							<outline text="if (opGetLineText () != daystring) {" created="Fri, 08 Mar 2013 15:29:19 GMT" pgfnum="19945">
								<outline text="doInsertForNewPost (daystring, up);" created="Fri, 08 Mar 2013 15:20:23 GMT" pgfnum="19933"/>
								<outline text="}" created="Fri, 08 Mar 2013 15:30:57 GMT" pgfnum="19946"/>
								</outline>
							<outline text="}" created="Fri, 08 Mar 2013 15:36:33 GMT" pgfnum="19954"/>
							</outline>
						<outline text="else {" created="Fri, 08 Mar 2013 15:31:31 GMT" pgfnum="19947">
							<outline text="doInsertForNewPost (daystring, right);" created="Fri, 08 Mar 2013 15:20:23 GMT" pgfnum="19933"/>
							<outline text="}" created="Fri, 08 Mar 2013 15:31:33 GMT" pgfnum="19948"/>
							</outline>
						<outline text="if (opGetOneAtt (&quot;name&quot;) == undefined) { //6/6/13 by DW">
							<outline text="opSetOneAtt (&quot;name&quot;, padWithZeros (now.getDate (), 2));"/>
							<outline text="}" created="Thu, 06 Jun 2013 18:55:21 GMT" pgfnum="25293"/>
							</outline>
						</outline>
					<outline text="" created="Fri, 08 Mar 2013 15:32:56 GMT" pgfnum="19951"/>
					<outline text="if (!appPrefs.flOneNotePerDay) {" created="Thu, 06 Jun 2013 19:03:20 GMT" pgfnum="25295">
						<outline text="doInsertForNewPost (timeString (now, true), right);" created="Fri, 08 Mar 2013 15:32:57 GMT" pgfnum="19952"/>
						<outline text="setNewPostType (flSetIcon); flTypeSet = true;" created="Tue, 11 Jun 2013 15:06:07 GMT" pgfnum="25752"/>
						<outline text="}" created="Thu, 06 Jun 2013 19:03:28 GMT" pgfnum="25296"/>
						</outline>
					<outline text="" created="Thu, 06 Jun 2013 19:07:39 GMT" pgfnum="25303"/>
					<outline text="if (s == undefined) {" created="Sat, 09 Mar 2013 23:26:05 GMT" pgfnum="20081">
						<outline text="doInsertForNewPost (&quot;&quot;, right);" created="Thu, 28 Feb 2013 23:51:49 GMT" pgfnum="19379">
							<outline text="opSetTextMode (true);" created="Thu, 28 Feb 2013 23:51:54 GMT" pgfnum="19380"/>
							</outline>
						<outline text="}" created="Sat, 09 Mar 2013 23:26:20 GMT" pgfnum="20085"/>
						</outline>
					<outline text="else {" created="Sat, 09 Mar 2013 23:26:21 GMT" pgfnum="20086">
						<outline text="doInsertForNewPost (s, right);" created="Thu, 28 Feb 2013 23:51:49 GMT" pgfnum="19379"/>
						<outline text="}" created="Sat, 09 Mar 2013 23:26:25 GMT" pgfnum="20087"/>
						</outline>
					<outline text="" created="Tue, 24 Jun 2014 17:31:27 GMT" pgfnum="42448"/>
					<outline text="if (attsForNewNode != undefined) { //6/24/14 by DW" created="Tue, 24 Jun 2014 17:31:31 GMT" pgfnum="42449">
						<outline text="opSetAllAtts (attsForNewNode);" created="Tue, 24 Jun 2014 17:32:03 GMT" pgfnum="42453"/>
						<outline text="if (!flTypeSet) {" created="Tue, 24 Jun 2014 17:46:18 GMT" pgfnum="42454">
							<outline text="flTypeSet = attsForNewNode.type != undefined;" created="Tue, 24 Jun 2014 17:46:29 GMT" pgfnum="42456"/>
							<outline text="}" created="Tue, 24 Jun 2014 17:46:24 GMT" pgfnum="42455"/>
							</outline>
						<outline text="}" created="Tue, 24 Jun 2014 17:31:59 GMT" pgfnum="42452"/>
						</outline>
					<outline text="" created="Tue, 24 Jun 2014 17:31:31 GMT" pgfnum="42451"/>
					<outline text="if (!flTypeSet) {" created="Tue, 11 Jun 2013 15:07:42 GMT" pgfnum="25755">
						<outline text="setNewPostType (flSetIcon); flTypeSet = true;" created="Tue, 11 Jun 2013 15:06:07 GMT" pgfnum="25752"/>
						<outline text="}" created="Tue, 11 Jun 2013 15:07:49 GMT" pgfnum="25756"/>
						</outline>
					<outline text="" created="Fri, 08 Mar 2013 15:51:41 GMT" pgfnum="19963"/>
					<outline text="flExpandCallbackDisabled = false; //3/14/13 by DW" created="Thu, 14 Mar 2013 16:22:39 GMT" pgfnum="20396"/>
					<outline text="" created="Thu, 14 Mar 2013 16:23:38 GMT" pgfnum="20397"/>
					<outline text="doInsertForNewPost (now.toLocaleDateString () + &quot;; &quot; + timeString (now, true) + &quot; by &quot; + appPrefs.authorName, up);" isComment="true" created="Thu, 28 Feb 2013 23:47:38 GMT" pgfnum="19377"/>
					<outline text=""/>
					<outline text="opMarkChanged (); //1/26/15 by DW"/>
					<outline text="}" created="Thu, 28 Feb 2013 23:45:47 GMT" pgfnum="19375"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				<outline text=""/>
				<outline text="function getUserDataFolder () {">
					<outline text="return (shell.getConfig ().userDataFolder);"/>
					<outline text="}"/>
					</outline>
				<outline text="function openSpecialFile (fname) {">
					<outline text="var f = getUserDataFolder () + fname;"/>
					<outline text="console.log (&quot;openSpecialFile: f == &quot; + f);"/>
					<outline text="fs.exists (f, function (flExists) {">
						<outline text="if (flExists) {">
							<outline text="openOutlineInTab (f);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="newOutlineFile (f);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function openMenubarOpml () {">
					<outline text="openSpecialFile (&quot;menubar.opml&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function openIconbarOpml () {">
					<outline text="openSpecialFile (&quot;iconbar.opml&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function openBookmarksOpml () {">
					<outline text="openSpecialFile (&quot;bookmarks.opml&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function setDefaultOutliner () {">
					<outline text="idDefaultOutliner = shell.getCurrentTab ().temp.idThisEditor;"/>
					<outline text="}"/>
					</outline>
				<outline text="function editOpmlHeaders () { ">
					<outline text="Changes" isComment="true">
						<outline text="5/15/17; 12:22:08 PM by DW">
							<outline text="Changed it so you really are editing the headers. If you delete one in the editor, it is deleted in the OPML. "/>
							</outline>
						</outline>
					<outline text="tabEdShow (&quot;Edit headers&quot;, opGetHeaders (), function (editedTable) {">
						<outline text="console.log (&quot;editOpmlHeaders: editedTable == &quot; + jsonStringify (editedTable));"/>
						<outline text="if (editedTable.title !== undefined) {">
							<outline text="opSetTitle (editedTable.title);"/>
							<outline text="}"/>
							</outline>
						<outline text="opSetHeaders (editedTable);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getInitialOpmlText (title) {">
					<outline text="var s = " created="Sun, 17 Feb 2013 16:05:01 GMT" pgfnum="18855">
						<outline text="&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;ISO-8859-1\&quot;?&gt;\n&lt;opml version=\&quot;2.0\&quot;&gt;\n\t&lt;head&gt;\n\t\t&lt;title&gt;[%title%]&lt;/title&gt;\n\t\t&lt;dateCreated&gt;[%created%]&lt;/dateCreated&gt;\n\t\t&lt;dateModified&gt;[%created%]&lt;/dateModified&gt;\n\t\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;outline text=\&quot;\&quot; created=\&quot;[%created%]\&quot; /&gt;\n\t\t&lt;/body&gt;\n\t&lt;/opml&gt;&quot;;" created="Sun, 17 Feb 2013 16:55:11 GMT" pgfnum="18868"/>
						</outline>
					<outline text="var replacetable = {">
						<outline text="title: title,"/>
						<outline text="created: new Date ().toUTCString ()"/>
						<outline text="};"/>
						</outline>
					<outline text="s = multipleReplaceAll (s, replacetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
					<outline text="return (s);"/>
					<outline text="}"/>
					</outline>
				<outline text="function toggleTwitterConnect () {">
					<outline text="shell.toggleTwitterConnect ()"/>
					<outline text="}"/>
					</outline>
				<outline text="function fileFromPath (f) {">
					<outline text="return (stringLastField (f, &quot;/&quot;));"/>
					<outline text="}"/>
					</outline>
				<outline text="function setOpmlHeadersBeforeSaving () {">
					<outline text="if (twIsTwitterConnected ()) {">
						<outline text="var headers = opGetHeaders (), screenName = twGetScreenName ();"/>
						<outline text="headers.ownerId = &quot;https://twitter.com/&quot; + screenName + &quot;/&quot;;"/>
						<outline text="headers.ownerName = twUserInfo.name;"/>
						<outline text="headers.ownerTwitterScreenName = screenName;"/>
						<outline text="opSetHeaders ();"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function prefsChanged () {">
					<outline text="flPrefsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function tweetThisIconClick () {">
					<outline text="var theText = opGetLineText (), type = opGetOneAtt (&quot;type&quot;), url = opGetOneAtt (&quot;url&quot;), ctTweetChars = theText.length;"/>
					<outline text="function doTweet () {">
						<outline text="twOutlinerTweet (theText, undefined, opGetCursorContext ());" created="Wed, 12 Jun 2013 17:23:22 GMT" pgfnum="25966"/>
						<outline text="}"/>
						</outline>
					<outline text="if (type == &quot;tweet&quot;) {">
						<outline text="twViewCursorTweet ();" created="Thu, 14 Feb 2013 16:13:25 GMT" pgfnum="18620"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="if (url !== undefined) { //it had a url attribute">
							<outline text="theText += &quot; &quot; + url;"/>
							<outline text="ctTweetChars += twGetUrlLength () + 1;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (ctTweetChars &gt; appPrefs.maxTweetLength) {">
							<outline text="alertDialog (&quot;Can't send the tweet because it is too long. It's &quot; + ctTweetChars + &quot; characters, the max is &quot; + appPrefs.maxTweetLength + &quot;.&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (appPrefs.flConfirmTweets) {">
								<outline text="confirmDialog (&quot;Tweet the text?&quot;, function () {" created="Wed, 27 Feb 2013 16:18:09 GMT" pgfnum="19236">
									<outline text="doTweet ();" created="Wed, 12 Jun 2013 17:23:22 GMT" pgfnum="25966"/>
									<outline text="});" created="Sun, 14 Apr 2013 02:15:30 GMT" pgfnum="22673"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="doTweet ();" created="Wed, 12 Jun 2013 17:23:22 GMT" pgfnum="25966"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function checkForTwitterReplies () { //5/25/17 by DW">
					<outline text="ifOutlineHasTweet (function () {">
						<outline text="console.log (&quot;everyMinute: Looking for replies to tweets in this outline.&quot;);"/>
						<outline text="twOutlinerGetTwitterReplies ();"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function linkIconClick () {">
					<outline text="var defaultUrl = appPrefs.lastLinkUrl, urlAtt = opGetOneAtt (&quot;url&quot;);" created="Wed, 13 Mar 2013 14:12:11 GMT" pgfnum="20295"/>
					<outline text="if ((!opInTextMode ()) &amp;&amp; (urlAtt != undefined)) {" created="Wed, 13 Mar 2013 14:13:30 GMT" pgfnum="20300">
						<outline text="defaultUrl = urlAtt;" created="Wed, 13 Mar 2013 14:13:36 GMT" pgfnum="20301"/>
						<outline text="}" created="Wed, 13 Mar 2013 14:13:39 GMT" pgfnum="20302"/>
						</outline>
					<outline text="askDialog (&quot;Enter URL for link:&quot;, defaultUrl, &quot;http://&quot;, function (url, flcancel) {" created="Tue, 08 Jan 2013 01:26:19 GMT" pgfnum="16860">
						<outline text="if (!flcancel) {">
							<outline text="if (opInTextMode ()) {">
								<outline text="opLink (url);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="opSetOneAtt (&quot;type&quot;, &quot;link&quot;);" created="Wed, 23 Jan 2013 18:14:17 GMT" pgfnum="17579"/>
								<outline text="opSetOneAtt (&quot;url&quot;, url);" created="Wed, 23 Jan 2013 18:14:17 GMT" pgfnum="17579"/>
								<outline text="opMarkChanged ();"/>
								<outline text="}"/>
								</outline>
							<outline text="appPrefs.lastLinkUrl = url;" created="Mon, 11 Feb 2013 19:09:27 GMT" pgfnum="18560"/>
							<outline text="prefsChanged ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function editAttributes () {">
					<outline text="function checkEnclosure (editedTable) { //6/9/17 by DW">
						<outline text="if (editedTable.enclosure !== undefined) {">
							<outline text="if (editedTable.enclosureType === undefined) {">
								<outline text="var obj = { //set up struct required by getRssEnclosureInfo">
									<outline text="enclosure: {">
										<outline text="url: editedTable.enclosure"/>
										<outline text="}"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="getRssEnclosureInfo (obj, function () { //call a fargoPub server to fill in the length and type of the enclosure">
									<outline text="editedTable.enclosureType = obj.enclosure.type;"/>
									<outline text="editedTable.enclosureLength = obj.enclosure.length;"/>
									<outline text="opSetAtts (editedTable);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="tabEdShow (&quot;Edit attributes&quot;, opGetAtts (), function (editedTable) {">
						<outline text="opSetAtts (editedTable);"/>
						<outline text="console.log (&quot;editAttributes: atts == &quot; + jsonStringify (editedTable));"/>
						<outline text="checkEnclosure (editedTable);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function updateAttsDisplay () {">
					<outline text="try { //errors were showing up here -- 5/15/17 by DW -- but the problem certainly wasn't here">
						<outline text="var when = opGetOneAtt (&quot;created&quot;), whenstring = &quot;&quot;;" created="Mon, 11 Feb 2013 16:47:23 GMT" pgfnum="18516"/>
						<outline text="function formatDateTime (d) {">
							<outline text="d = new Date (d);"/>
							<outline text="return (d.toLocaleDateString () + &quot; at &quot; + d.toLocaleTimeString ());"/>
							<outline text="return (dateFormat (d, &quot;m/d/yyyy; h:MM TT&quot;));" isComment="true"/>
							<outline text="return (dateFormat (d, &quot;dddd, mmmm dS, yyyy, h:MM:ss TT&quot;));" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="if (when !== undefined) {">
							<outline text="whenstring = &quot;&lt;span class=\&quot;spCreatedAttDisplay\&quot;&gt;Created: &quot; + formatDateTime (when) + &quot;. &lt;/span&gt;&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="var attsstring = opGetAttsDisplayString ()"/>
						<outline text="if (attsstring.length &gt; 0) {">
							<outline text="attsstring = &quot; Atts: &quot; + attsstring;"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var charsstring = &quot; length=&quot; + opGetLineText ().length + &quot;.&quot;;"/>
						<outline text=""/>
						<outline text="$(&quot;#idAttributesDisplay&quot;).html (whenstring + attsstring + charsstring);"/>
						<outline text=""/>
						<outline text="$(&quot;#idFilepath&quot;).text (getCurrentFilePath ());"/>
						<outline text="}"/>
						</outline>
					<outline text="catch (err) {">
						<outline text="console.log (&quot;updateAttsDisplay: err.message == &quot; + err.message);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function showEditor (flDisplay) {">
					<outline text="var val;"/>
					<outline text="if (flDisplay) {">
						<outline text="val = &quot;block&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="val = &quot;none&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;#idEditorContainer&quot;).css (&quot;display&quot;, val);"/>
					<outline text="}"/>
					</outline>
				<outline text="function runCursorScript () {" created="Wed, 09 Jan 2013 16:01:18 GMT" pgfnum="16939">
					<outline text="var theScript = opGetLineText ();"/>
					<outline text="shell.runScript (theScript, function (val, errorMessage) {">
						<outline text="console.log (&quot;runCursorScript: val == &quot; + val + &quot;, errorMessage == &quot; + errorMessage);"/>
						<outline text="if (errorMessage !== undefined) {">
							<outline text="alertDialog (errorMessage);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="opDeleteSubs ();" created="Thu, 10 Jan 2013 17:29:18 GMT" pgfnum="17014"/>
							<outline text="opInsert (val, &quot;right&quot;);" created="Wed, 09 Jan 2013 20:34:27 GMT" pgfnum="16942"/>
							<outline text="opMakeComment ();"/>
							<outline text="opGo (&quot;left&quot;, 1);" created="Thu, 10 Jan 2013 16:19:40 GMT" pgfnum="16986"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="console.log (&quot;Far is this nort forking?&quot;);" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="try {" isComment="true">
						<outline text="var value = eval (opGetLineText ());" created="Wed, 09 Jan 2013 14:30:59 GMT" pgfnum="16922"/>
						<outline text="opDeleteSubs ();" created="Thu, 10 Jan 2013 17:29:18 GMT" pgfnum="17014"/>
						<outline text="opInsert (value, &quot;right&quot;);" created="Wed, 09 Jan 2013 20:34:27 GMT" pgfnum="16942"/>
						<outline text="opGo (&quot;left&quot;, 1);" created="Thu, 10 Jan 2013 16:19:40 GMT" pgfnum="16986"/>
						<outline text="}"/>
						</outline>
					<outline text="catch (err) {" isComment="true">
						<outline text="alertDialog (err.message);"/>
						<outline text="}"/>
						</outline>
					<outline text="" isComment="true"/>
					<outline text="}" created="Wed, 09 Jan 2013 16:01:24 GMT" pgfnum="16940"/>
					</outline>
				<outline text="function addOutlinerCallbacks (idOutlineObject) {" created="Sat, 16 Feb 2013 22:13:36 GMT" pgfnum="18835">
					<outline text="if (idOutlineObject === undefined) {">
						<outline text="idOutlineObject = &quot;#outliner&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="idOutlineObject = &quot;#&quot; + idOutlineObject;"/>
						<outline text="}"/>
						</outline>
					<outline text="function myExpandCallback () {">
						<outline text="Changes" isComment="true">
							<outline text="6/29/16; 1:50:08 PM by DW">
								<outline text="Cribbed this code so we can use the nodeStorage HTTP proxy to make HTTP requests. No CORS problems there because we're in the same domain."/>
								</outline>
							</outline>
						<outline text="try {">
							<outline text="var type = opGetOneAtt (&quot;type&quot;), url = opGetOneAtt (&quot;url&quot;);" created="Mon, 11 Feb 2013 16:47:23 GMT" pgfnum="18516"/>
							<outline text="console.log (&quot;myExpandCallback: type == &quot; + type);"/>
							<outline text="if ((type == &quot;link&quot;) &amp;&amp; (url != undefined)) {" created="Thu, 14 Feb 2013 16:12:23 GMT" pgfnum="18617">
								<outline text="shell.openUrl (url);" created="Thu, 14 Feb 2013 16:13:25 GMT" pgfnum="18620"/>
								<outline text="return;" created="Thu, 14 Feb 2013 16:13:30 GMT" pgfnum="18621"/>
								<outline text="}" created="Thu, 14 Feb 2013 16:12:28 GMT" pgfnum="18618"/>
								</outline>
							<outline text="if ((type == &quot;include&quot;) &amp;&amp; (url != undefined)) { //2/16/15 by DW" created="Thu, 14 Feb 2013 17:32:53 GMT" pgfnum="18648">
								<outline text="var headers = {&quot;Accept&quot;: &quot;text/x-opml&quot;}; //7/17/15 by DW -- the same header the OPML Editor uses for includes."/>
								<outline text="console.log (&quot;myExpandCallback: headers = &quot; + jsonStringify (headers));"/>
								<outline text="twReadHttpWithProxy (url, function (s) {">
									<outline text="console.log (&quot;opExpandCallback: expanding the include == &quot; + url);" isComment="true"/>
									<outline text="console.log (&quot;opExpandCallback: s == &quot; + s);" isComment="true"/>
									<outline text="opDeleteSubs ();" created="Wed, 27 Feb 2013 14:57:47 GMT" pgfnum="19214"/>
									<outline text="opInsertXml (s, right); "/>
									<outline text="opClearChanged ();"/>
									<outline text="}, undefined, headers);"/>
									</outline>
								<outline text="return;"/>
								<outline text="}" created="Thu, 14 Feb 2013 17:33:20 GMT" pgfnum="18650"/>
								</outline>
							<outline text="if (type == &quot;tweet&quot;) { //7/17/16 by DW">
								<outline text="if (opCountSubs () == 0) {" created="Fri, 14 Jun 2013 18:51:16 GMT" pgfnum="26211">
									<outline text="shell.openUrl (twGetCursorTweetUrl ()); "/>
									<outline text="twViewCursorTweet ();" isComment="true" created="Thu, 14 Feb 2013 16:13:25 GMT" pgfnum="18620"/>
									<outline text="return;" created="Thu, 14 Feb 2013 16:13:30 GMT" pgfnum="18621"/>
									<outline text="}" created="Thu, 14 Feb 2013 16:12:28 GMT" pgfnum="18618"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="console.log (&quot;opExpandCallback: error == &quot; + err.message);    "/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="$(idOutlineObject).concord ({">
						<outline text="&quot;callbacks&quot;: {" created="Sun, 17 Feb 2013 16:58:55 GMT" pgfnum="18876">
							<outline text="&quot;opInsert&quot;: function (op) {" created="Tue, 08 Jan 2013 17:24:49 GMT" pgfnum="16878">
								<outline text="opInsertCallback (op);"/>
								<outline text="},"/>
								</outline>
							<outline text="&quot;opCursorMoved&quot;: function (op) {" created="Tue, 08 Jan 2013 17:24:49 GMT" pgfnum="16878">
								<outline text="console.log (&quot;cursor moved&quot;);" isComment="true"/>
								<outline text="whenLastUserAction = new Date (); " created="Fri, 04 Apr 2014 21:09:34 GMT" pgfnum="39965"/>
								<outline text=""/>
								<outline text="if (opGetOneAtt (&quot;created&quot;) === undefined) { //no &lt;i&gt;created&lt;/i&gt; att, add one -- 1/22/17 by DW">
									<outline text="opSetOneAtt (&quot;created&quot;, new Date ().toUTCString ());"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="updateAttsDisplay ();"/>
								<outline text="opMarkChanged (); //1/30/15 by DW"/>
								<outline text="},"/>
								</outline>
							<outline text="&quot;opKeystroke&quot;: function (event) {" created="Tue, 08 Jan 2013 17:24:49 GMT" pgfnum="16878">
								<outline text="if (event.metaKey) {">
									<outline text="if (event.which == 75) { //cmd-k is a shortcut for the link icon">
										<outline text="linkIconClick ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (event.which == 8) { //5/1/15 by DW">
									<outline text="opMarkChanged ();"/>
									<outline text="}"/>
									</outline>
								<outline text="if ((event.which &gt;= 33) &amp;&amp; (event.which &lt;= 36)) { //4/30/15 by DW -- pageup, pagedown, home, end">
									<outline text="//Concord was inserting these, wiping out the headline, this is where Doc's empty headlines were coming from.">
										<outline text="//so we just translate them to 31, which Concord will ignore."/>
										<outline text="//the best solution is to fix Concord so it ignores these."/>
										<outline text="//but I really don't want to rebuild it right now. too much other stuff depends on it. "/>
										</outline>
									<outline text="event.which = 31;"/>
									<outline text="}"/>
									</outline>
								<outline text="if ((event.which == 191) &amp;&amp; event.metaKey &amp;&amp; event.shiftKey) { //cmd-? -- 3/27/13 by DW" created="Wed, 09 Jan 2013 14:30:41 GMT" pgfnum="16921">
									<outline text="showCribsheet ();"/>
									<outline text="}" created="Wed, 09 Jan 2013 14:31:27 GMT" pgfnum="16924"/>
									</outline>
								<outline text="opKeystrokeCallback (event);"/>
								<outline text="},"/>
								</outline>
							<outline text="&quot;opExpand&quot;: function () {" created="Mon, 11 Feb 2013 16:41:26 GMT" pgfnum="18511">
								<outline text="myExpandCallback (); "/>
								<outline text="},"/>
								</outline>
							<outline text="&quot;opCollapse&quot;: function () {" created="Mon, 11 Feb 2013 16:41:26 GMT" pgfnum="18511">
								<outline text="opCollapseCallback (); "/>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Sun, 17 Feb 2013 16:59:03 GMT" pgfnum="18877"/>
							</outline>
						<outline text="});" created="Sat, 16 Feb 2013 23:53:44 GMT" pgfnum="18845"/>
						</outline>
					<outline text="$(idOutlineObject).keyup (function () {">
						<outline text="whenLastKeystroke = new Date ();"/>
						<outline text="whenLastUserAction = whenLastKeystroke;"/>
						<outline text="updateCharacterCount ();" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="$(idOutlineObject).keydown (function (ev) {">
						<outline text="if ((ev.which == 191) &amp;&amp; event.metaKey) {">
							<outline text="console.log (&quot;Cmd-/&quot;);"/>
							<outline text="runCursorScript ();"/>
							<outline text="event.stopPropagation ();"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sat, 16 Feb 2013 22:13:41 GMT" pgfnum="18836"/>
					</outline>
				<outline text="function setOutlinerText (idOutlineObject, opmltext, flReadOnly) {">
					<outline text="idDefaultOutliner = idOutlineObject; //set global"/>
					<outline text="opInitOutliner (opmltext, flReadOnly);" created="Wed, 16 Jan 2013 00:08:18 GMT" pgfnum="17213"/>
					<outline text="addOutlinerCallbacks (idOutlineObject);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getCurrentOpml () {">
					<outline text="idDefaultOutliner = shell.getCurrentTab ().temp.idThisEditor;"/>
					<outline text="return (opOutlineToXml (&quot;&quot;, &quot;&quot;));"/>
					<outline text="}"/>
					</outline>
				<outline text="function getCurrentFilePath () {">
					<outline text="var f = shell.getCurrentTab ().f;"/>
					<outline text="return (f);"/>
					<outline text="}"/>
					</outline>
				<outline text="function startEditor (opmltext) {">
					<outline text="var idThisEditor = &quot;idEditor&quot; + editorSerialnum++;"/>
					<outline text="if (idCurrentEditor !== undefined) {">
						<outline text="$(&quot;#&quot; + idCurrentEditor).css (&quot;display&quot;, &quot;none&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;#idEditorContainer&quot;).append (&quot;&lt;div class=\&quot;divEditor\&quot; id=\&quot;&quot; + idThisEditor + &quot;\&quot;&gt;&lt;/div&gt;&quot;);"/>
					<outline text="idCurrentEditor = idThisEditor;"/>
					<outline text="setOutlinerText (idThisEditor, opmltext, false);"/>
					<outline text="$(&quot;#&quot; + idThisEditor).on (&quot;keyup&quot;, function (event) {">
						<outline text="whenLastKeystroke = new Date ();"/>
						<outline text="whenLastUserAction = whenLastKeystroke;"/>
						<outline text="console.log (&quot;keyup&quot;);"/>
						<outline text="statusChanged ();" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="return (idThisEditor);"/>
					<outline text="}"/>
					</outline>
				<outline text="function viewActiveTab (tab, callback) {">
					<outline text="if (tab.temp.idThisEditor === undefined) {">
						<outline text="if (tab.flInstantOutline) {">
							<outline text="console.log (&quot;viewActiveTab: tab.flInstantOutline == &quot; + tab.flInstantOutline);"/>
							<outline text="readHttpFile (tab.urlOpmlFile, function (opmltext) {">
								<outline text="tab.temp.idThisEditor = startEditor (opmltext);"/>
								<outline text="showEditor (true);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var f = tab.f;"/>
							<outline text="fs.readFile (f, function (err, data) {">
								<outline text="tab.temp.idThisEditor = startEditor (data.toString ());"/>
								<outline text="showEditor (true);"/>
								<outline text="statusChanged ();" isComment="true"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="if (idCurrentEditor !== undefined) {">
							<outline text="$(&quot;#&quot; + idCurrentEditor).css (&quot;display&quot;, &quot;none&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="$(&quot;#&quot; + tab.temp.idThisEditor).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="idCurrentEditor = tab.temp.idThisEditor;"/>
						<outline text="if (callback !== undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function clickTabIfOpen (f) { //6/11/17 by DW">
					<outline text="var myTabs = shell.getTabsArray ();"/>
					<outline text="for (i = 0; i &lt; myTabs.length; i++) {">
						<outline text="if (myTabs [i].f == f) {">
							<outline text="shell.tabClick (i);"/>
							<outline text="return (true);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (false);"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function openOutlineInTab (f, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="6/4/17; 9:37:25 AM by DW">
							<outline text="If file is already open in a tab just activate that tab."/>
							</outline>
						</outline>
					<outline text="if (!clickTabIfOpen (f)) {">
						<outline text="var tab = shell.addTab (stringLastField (f, &quot;/&quot;), f);"/>
						<outline text="currentFilePath = f;"/>
						<outline text="viewActiveTab (tab, callback);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function ifOutlineHasTweet (callback) { //call the callback if the current outline has at least one tweet node -- 8/3/16 by DW">
					<outline text="opVisitAll (function (headline) {" created="Mon, 20 May 2013 15:55:13 GMT" pgfnum="2782">
						<outline text="var type = headline.attributes.getOne (&quot;type&quot;);"/>
						<outline text="console.log (type + &quot;: &quot; + headline.getLineText ());" isComment="true"/>
						<outline text="if (type == &quot;tweet&quot;) {">
							<outline text="callback ();"/>
							<outline text="return (false); //found it" created="Sat, 20 Jul 2013 19:27:52 GMT" pgfnum="28059"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (true); //keep looking" created="Sat, 20 Jul 2013 19:28:04 GMT" pgfnum="28060"/>
							<outline text="}"/>
							</outline>
						<outline text="});" created="Mon, 20 May 2013 15:57:41 GMT" pgfnum="2784"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function newOutlineFile (f) {">
					<outline text="var opmltext = getInitialOpmlText (fileFromPath (f));"/>
					<outline text="fs.writeFile (f, opmltext, function (err) {">
						<outline text="openOutlineInTab (f);"/>
						<outline text="checkSpecialFileSave (f, opmltext); //6/12/17 by DW"/>
						<outline text="}); "/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function newFileCommand () {">
					<outline text="shell.newFileDialog (function (f) {">
						<outline text="newOutlineFile (f);"/>
						<outline text="fs.writeFile (f, getInitialOpmlText (fileFromPath (f)), function (err) {" isComment="true">
							<outline text="openOutlineInTab (f, function () {">
								<outline text="});"/>
								</outline>
							<outline text="}); "/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function openFileCommand () {">
					<outline text="shell.openFileDialog (function (filelist) {">
						<outline text="openOutlineInTab (filelist [0]);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function closeTabCommand () {">
					<outline text="shell.closeTab ();"/>
					<outline text="}"/>
					</outline>
				<outline text="function openSettingsDialog () {">
					<outline text="shell.openSettingsDialog (function (appPrefsFromStorage) {">
						<outline text="for (var x in appPrefsFromStorage) {">
							<outline text="appPrefs [x] = appPrefsFromStorage [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="shell.openSettingsDialog ();" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function showHidePage () {" isComment="true">
					<outline text="var ctTabs = shell.getTabsArray ().length, displayval = &quot;block&quot;;"/>
					<outline text="if (ctTabs == 0) {">
						<outline text="displayval = &quot;none&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="if (displayval != $(&quot;#idPageBody&quot;).css (&quot;display&quot;)) {">
						<outline text="console.log (&quot;showHidePage: displayval == &quot; + displayval);"/>
						<outline text="$(&quot;#idPageBody&quot;).css (&quot;display&quot;, displayval);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function updateSaveStatus () {">
					<outline text="var s = &quot;SAVED&quot;;"/>
					<outline text="if (opHasChanged ()) {">
						<outline text="s = &quot;&lt;div style=\&quot;color: silver\&quot;&gt;NOT &quot; + s + &quot;&lt;/div&gt;&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="s = &quot;&lt;div style=\&quot;color: black\&quot;&gt;&quot; + s + &quot;&lt;/div&gt;&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;#idSaveStatus&quot;).html (s);"/>
					<outline text="$(&quot;#idSaveStatus&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function checkSpecialFileSave (f, opmltext) { //6/12/17 by DW">
					<outline text="if (f == getScriptsMenuFile ()) { ">
						<outline text="deleteScriptsMenus ();"/>
						<outline text="startScriptsMenu (opmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (f == getIconBarFile ()) { //5/31/17 by DW">
						<outline text="deleteUserIcons ();"/>
						<outline text="startIconBar (opmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (f == getBookmarksMenuFile ()) { //6/11/17 by DW">
						<outline text="buildBookmarksMenu (opmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everyMinute () {">
					<outline text="var now = new Date (), config = shell.getConfig ();"/>
					<outline text="console.log (&quot;\neveryMinute: &quot; + now.toLocaleTimeString () + &quot;, &quot; + config.productname + &quot; v&quot; + config.version + &quot;.&quot;);"/>
					<outline text="if (appPrefs.flCheckForReplies) {">
						<outline text="if ((now.getMinutes () % appPrefs.ctMinBetwTweetReplyCheck) == 0) {">
							<outline text="checkForTwitterReplies ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="var now = clockNow ();"/>
					<outline text="setDefaultOutliner ();"/>
					<outline text="if (secondsSince (whenLastUserAction) &gt;= 0.5) {">
						<outline text="if (opHasChanged ()) {" created="Mon, 11 Mar 2013 20:59:25 GMT" pgfnum="20165">
							<outline text="var opmltext,  f = getCurrentFilePath ();"/>
							<outline text="setOpmlHeadersBeforeSaving ()"/>
							<outline text="opmltext = getCurrentOpml ();"/>
							<outline text="console.log (&quot;everySecond: saving opml. &quot; + opmltext.length + &quot; chars, &quot; + secondsSince (whenLastKeystroke) + &quot; secs since keystroke.&quot;);"/>
							<outline text="fs.writeFile (f, opmltext, function (err) {" created="Fri, 22 Mar 2013 01:52:21 GMT" pgfnum="21049">
								<outline text="whenLastSave = now;" created="Sat, 02 Mar 2013 21:32:50 GMT" pgfnum="19559"/>
								<outline text="opClearChanged ();"/>
								<outline text="uploadPublicOpml (); //5/3/17 by DW"/>
								<outline text="checkSpecialFileSave (f, opmltext); //6/12/17 by DW"/>
								<outline text="});"/>
								</outline>
							<outline text="}" created="Mon, 11 Mar 2013 20:59:45 GMT" pgfnum="20170"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (flPrefsChanged) {">
						<outline text="flPrefsChanged = false;"/>
						<outline text="shell.setPrefs (appPrefs);"/>
						<outline text="}"/>
						</outline>
					<outline text="updateAttsDisplay ();"/>
					<outline text="initTwitterMenuItems ();"/>
					<outline text="updateSaveStatus ();"/>
					<outline text="updateRenderModeCommandString (); "/>
					<outline text="setupIconHandlers (); //6/2/17 by DW"/>
					<outline text="if (!flScheduledEveryMinute) { ">
						<outline text="if (now.getSeconds () == 0) {">
							<outline text="setInterval (everyMinute, 60000); "/>
							<outline text="flScheduledEveryMinute = true;"/>
							<outline text="everyMinute (); //it's the top of the minute, we have to do one now"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="showHidePage ();" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="var options = {">
						<outline text="tabClickCallback: function (tab) {">
							<outline text="console.log (&quot;tabClickCallback: tab == &quot; + jsonStringify (tab));"/>
							<outline text="currentFilePath = tab.f;"/>
							<outline text="viewActiveTab (tab);"/>
							<outline text="try {">
								<outline text="updateAttsDisplay (); //it'll fail on startup, other times we want the quick response"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="}"/>
								</outline>
							<outline text="},"/>
							</outline>
						<outline text="tabCloseCallback: function (tab) {">
							<outline text="console.log (&quot;tabCloseCallback: tab == &quot; + jsonStringify (tab));"/>
							<outline text="},"/>
							</outline>
						<outline text="tabUpdatedCallback: function (tab, theData) {">
							<outline text="console.log (&quot;tabUpdatedCallback: theData.length == &quot; + theData.length);"/>
							<outline text="setOutlinerText (tab.temp.idThisEditor, theData, true);"/>
							<outline text="},"/>
							</outline>
						<outline text="applySettingsCallback: function (theSettings) {">
							<outline text="console.log (&quot;applySettingsCallback: theSettings.favoriteColor == &quot; + theSettings.favoriteColor);" isComment="true"/>
							<outline text="$(&quot;#idPageBody&quot;).css (&quot;color&quot;, theSettings.favoriteColor);" isComment="true"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="shell.init (options, function (appPrefsFromStorage) {">
						<outline text="for (var x in appPrefsFromStorage) {">
							<outline text="appPrefs [x] = appPrefsFromStorage [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="if (appPrefs.flFirstLaunch) { //5/18/17 by DW -- give them a file to start with first time the app launches">
							<outline text="console.log (&quot;startup: appPrefs.flFirstLaunch == &quot; + appPrefs.flFirstLaunch);"/>
							<outline text="newOutlineFile (getUserDataFolder () + &quot;hello.opml&quot;);"/>
							<outline text="appPrefs.flFirstLaunch = false;"/>
							<outline text="}"/>
							</outline>
						<outline text="prefsChanged ();"/>
						<outline text="showEditor (true);"/>
						<outline text="startScriptsMenu ();"/>
						<outline text="startIconBar (); //5/30/17 by DW"/>
						<outline text="buildBookmarksMenu (); //6/11/17 by DW"/>
						<outline text="initTwitterMenuItems ();"/>
						<outline text="if (twIsTwitterConnected ()) {">
							<outline text="twGetUserInfo (twGetScreenName (), function (userinfo) {">
								<outline text="twUserInfo = userinfo;"/>
								<outline text="console.log (&quot;startup: twUserInfo == &quot; + jsonStringify (twUserInfo));"/>
								<outline text="twGetTwitterConfig (function () { ">
									<outline text="everySecond (); //don't wait for the next second, call immediately"/>
									<outline text="self.setInterval (everySecond, 1000); "/>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="everySecond (); //don't wait for the next second, call immediately"/>
							<outline text="self.setInterval (everySecond, 1000); "/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="outlinerstyles.css">
				<outline text="body {">
					<outline text="font-family: Ubuntu;"/>
					<outline text="font-size: 18px;"/>
					<outline text="background-color: whitesmoke;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="width: 80%;"/>
					<outline text="margin-top: 80px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="margin-bottom: 400px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divTable {">
					<outline text="display: table; "/>
					<outline text="width: 100%;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divEditorContainer {">
					<outline text="display: none;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divIconContainer {">
					<outline text="display: table-cell;"/>
					<outline text="width: 35px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divIconBar {">
					<outline text="margin-top: 37px;"/>
					<outline text="border-top: 1px solid silver;" isComment="true"/>
					<outline text="text-align: center;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divIcon {" created="Fri, 19 Apr 2013 02:03:35 GMT" pgfnum="22960">
					<outline text="padding-top: 5px;" created="Mon, 04 Mar 2013 00:30:20 GMT" pgfnum="19659"/>
					<outline text="padding-bottom: 35px;" created="Mon, 04 Mar 2013 00:30:20 GMT" pgfnum="19659"/>
					<outline text="text-align: right;"/>
					<outline text="}" created="Fri, 19 Apr 2013 02:03:45 GMT" pgfnum="22962"/>
					</outline>
				<outline text=".divIcon i {" created="Sun, 17 Feb 2013 20:18:34 GMT" pgfnum="18904">
					<outline text="font-size: 24px;" created="Sun, 17 Feb 2013 20:18:43 GMT" pgfnum="18906"/>
					<outline text="color: silver; " created="Sun, 17 Feb 2013 20:18:46 GMT" pgfnum="18907"/>
					<outline text="}" created="Sun, 17 Feb 2013 20:18:39 GMT" pgfnum="18905"/>
					</outline>
				<outline text=".divEditor { ">
					<outline text="width: 900px;" isComment="true"/>
					<outline text="min-height: 400px;"/>
					<outline text="border: 1px solid silver;"/>
					<outline text="padding: 10px;"/>
					<outline text="margin-top: 25px;" isComment="true"/>
					<outline text="margin-bottom: 10px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divFilepath {">
					<outline text="font-size: 15px;"/>
					<outline text="margin-top: 5px;"/>
					<outline text="margin-bottom: 10px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divVersionNumber {">
					<outline text="font-size: 12px;"/>
					<outline text="float: right;"/>
					<outline text="padding: 12px;"/>
					<outline text="display: none;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=".divStatusMessage {">
					<outline text="display: none;"/>
					<outline text="font-size: 18px;" isComment="true"/>
					<outline text="color: gray;" isComment="true"/>
					<outline text="min-height: 1.5em;" isComment="true"/>
					<outline text="border: 1px solid gainsboro;" isComment="true"/>
					<outline text="margin-bottom: 20px;" isComment="true"/>
					<outline text="background-color: white;" isComment="true"/>
					<outline text="width: 30em;" isComment="true"/>
					<outline text="margin-left: auto;" isComment="true"/>
					<outline text="margin-right: auto;" isComment="true"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divStatusBelowTabs {">
					<outline text="margin-top: -6px;"/>
					<outline text="margin-left: 35px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divAttributesDisplay {">
					<outline text="font-size: 14px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divSaveStatus {">
					<outline text="font-size: 14px;"/>
					<outline text="float: right;"/>
					<outline text="padding-top: 16px;"/>
					<outline text="padding-right: 2px;"/>
					<outline text="display: none;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=".divMenubar .container {">
					<outline text="width: 940px;"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="/* tabs */">
					<outline text=".nav-tabs {">
						<outline text="margin-bottom: -1px;"/>
						<outline text="font-size: 16px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; li &gt; a {">
						<outline text="cursor: pointer;"/>
						<outline text="color: inherit;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; .active &gt; a, .nav-tabs &gt; .active &gt; a:hover, .nav-tabs &gt; .active &gt; a:focus {">
						<outline text="background-color: white;"/>
						<outline text="border: 1px solid silver;"/>
						<outline text="border-bottom-color: transparent;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTabDisplay {">
						<outline text="border: 1px solid silver;" isComment="true"/>
						<outline text="background-color: white;"/>
						<outline text="min-height: 400px;" isComment="true"/>
						<outline text="padding-top: 10px;" isComment="true"/>
						<outline text="margin-bottom: 500px;" isComment="true"/>
						<outline text="margin-top: 110px;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".spTabTitleText {">
						<outline text="margin-left: 2px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".iconUpdateWaiting {">
						<outline text="font-weight: bold;"/>
						<outline text="color: limegreen;"/>
						<outline text="}"/>
						</outline>
					<outline text=".nav-tabs &gt; li &gt; a, .nav-pills &gt; li &gt; a {">
						<outline text="padding-left: 8px;"/>
						<outline text="padding-right: 8px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divMyTabs {">
						<outline text="display: table-cell;"/>
						<outline text="vertical-align: top;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					</outline>
				<outline text="/* title-description dialog */">
					<outline text=".divTitleDescriptionDialog {">
						<outline text="}"/>
						</outline>
					<outline text=".divTitleDescriptionDialog label { ">
						<outline text="display: inline;"/>
						<outline text="float: left;"/>
						<outline text="text-align: right;"/>
						<outline text="padding-top: 4px;"/>
						<outline text="width: 130px;"/>
						<outline text="margin-right: .5em;"/>
						<outline text="font-family: Arial;"/>
						<outline text="font-size: 16px;"/>
						<outline text="line-height: 140%;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTitleDescriptionDialog .xlarge {" created="Thu, 03 Jan 2013 22:51:02 GMT" pgfnum="16600">
						<outline text="width: 530px;"/>
						<outline text="font-size: 16px;" created="Tue, 01 Jan 2013 16:39:50 GMT" pgfnum="16549"/>
						<outline text="height: auto;" created="Tue, 01 Jan 2013 16:35:06 GMT" pgfnum="16544"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:51:18 GMT" pgfnum="16602"/>
						</outline>
					<outline text=".divTitleDescriptionDialog .modal {" created="Tue, 01 Jan 2013 03:59:34 GMT" pgfnum="16538">
						<outline text="left: 40%;" created="Tue, 01 Jan 2013 03:59:57 GMT" pgfnum="16539"/>
						<outline text="width: 740px;" created="Tue, 01 Jan 2013 04:00:36 GMT" pgfnum="16541"/>
						<outline text="}" created="Tue, 01 Jan 2013 04:00:11 GMT" pgfnum="16540"/>
						</outline>
					<outline text=".divTitleDescriptionDialog .clearfix { ">
						<outline text="margin-bottom: 15px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divTitleDescriptionDialog .btn {" created="Wed, 26 Dec 2012 23:19:22 GMT" pgfnum="16391">
						<outline text="width: 80px;" created="Wed, 26 Dec 2012 23:19:34 GMT" pgfnum="16393"/>
						<outline text="margin-left: 5px;" created="Wed, 26 Dec 2012 23:22:19 GMT" pgfnum="16394"/>
						<outline text="}" created="Wed, 26 Dec 2012 23:19:31 GMT" pgfnum="16392"/>
						</outline>
					</outline>
				</outline>
			<outline text="outlinerindex.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title id=&quot;idPageTitle&quot;&gt;Hello Outliner!&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/storage/api.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/concord.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/concordKeyboard.js&quot; /&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/outliner.js?x=1&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/twoutliner.js?x=1&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/xml.js?x=0&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/arrowpad.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/tableeditor.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;http://fargo.io/code/shared/tableeditor.css&quot;/&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/buildrss.js&quot;&gt;&lt;/script&gt; "/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;outlinerhomepage.js?x=3&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;outlinerstyles.css&quot;/&gt;"/>
						<outline text="&lt;link href=&quot;lib/electronshell.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt;"/>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divMenubar&quot; id=&quot;idMenubar&quot;&gt;" created="Thu, 28 Mar 2013 21:39:05 GMT" pgfnum="21615">
							<outline text="&lt;div class=&quot;topbar-wrapper&quot; style=&quot;z-index: 5;&quot;&gt;">
								<outline text="&lt;div class=&quot;navbar navbar-fixed-top&quot; data-dropdown=&quot;dropdown&quot;&gt;">
									<outline text="&lt;div class=&quot;divVersionNumber&quot;&gt;">
										<outline text="&lt;span id=&quot;idVersionNumber&quot;&gt;&lt;/span&gt;"/>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;div class=&quot;navbar-inner&quot;&gt;">
										<outline text="&lt;div class=&quot;container&quot;&gt;">
											<outline text="&lt;a class=&quot;brand&quot; href=&quot;/&quot;&gt;&lt;span id=&quot;idMenuProductName&quot;&gt;&lt;/span&gt;&lt;/a&gt;"/>
											<outline text="&lt;ul class=&quot;nav&quot; id=&quot;idMainMenuList&quot;&gt;">
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idFileMenu&quot;&gt; ">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;File&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;newFileCommand ();&quot;&gt;New file...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;openFileCommand ();&quot;&gt;Open file...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;addTabCommand ();&quot;&gt;Add tab...&lt;/a&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;closeTabCommand ();&quot;&gt;Close&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;viewOutlineOpml ();&quot;&gt;View OPML...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;titleDescriptionDialog ();&quot;&gt;Set title &amp; description...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;editOpmlHeaders ();&quot;&gt;Edit OPML headers...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;runCursorScript ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-/&lt;/span&gt;Run Selection&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;makeOutlinePublic ();&quot;&gt;Make outline public...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;subscribeToInstantOutlineCommand ();&quot;&gt;Subscribe to outline...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;dropdown-submenu&quot;&gt;">
															<outline text="&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot;&gt;Special files...&lt;/a&gt;">
																<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;openMenubarOpml ()&quot;&gt;Menubar...&lt;/a&gt;&lt;/li&gt;"/>
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;openIconbarOpml ()&quot;&gt;Iconbar...&lt;/a&gt;&lt;/li&gt;"/>
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;openBookmarksOpml ()&quot;&gt;Bookmarks...&lt;/a&gt;&lt;/li&gt;"/>
																	</outline>
																<outline text="&lt;/ul&gt;"/>
																</outline>
															<outline text="&lt;/li&gt;"/>
															</outline>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;shell.openUserDataFolder ();&quot;&gt;Open data folder&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idOutlinerMenu&quot;&gt; ">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Outliner&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opExpand ();&quot;&gt;Expand&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opExpandAllLevels ();&quot;&gt;Expand All Subs&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opExpandEverything ();&quot;&gt;Expand Everything&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opCollapse ();&quot;&gt;Collapse&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opCollapseEverything ();&quot;&gt;Collapse Everything&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opDeleteLine ();&quot;&gt;Delete Line&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;dropdown-submenu&quot;&gt;">
															<outline text="&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot;&gt;Build...&lt;/a&gt;">
																<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;buildListicle ()&quot;&gt;Listicle&lt;/a&gt;&lt;/li&gt;"/>
																	<outline text="&lt;li&gt;&lt;a href=&quot;#&quot; tabindex=&quot;-1&quot; onclick=&quot;buildStatusCenter ()&quot;&gt;Status Center&lt;/a&gt;&lt;/li&gt;"/>
																	</outline>
																<outline text="&lt;/ul&gt;"/>
																</outline>
															<outline text="&lt;/li&gt;"/>
															</outline>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opFindCommand ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-F&lt;/span&gt;Find...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opFindAgainCommand ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-G&lt;/span&gt;Find again&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;toggleRenderMode ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-`&lt;/span&gt;&lt;span id=&quot;idRenderModeCommandString&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idReorgMenu&quot;&gt; ">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Reorg&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (up, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-U&lt;/span&gt;Move Up&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (down, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-D&lt;/span&gt;Move Down&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (left, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-L&lt;/span&gt;Move Left&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opReorg (right, 1);&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-R&lt;/span&gt;Move Right&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="" created="Mon, 12 May 2014 23:20:46 GMT" pgfnum="41579"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;toggleArrowPad ();&quot;&gt;&lt;span id=&quot;idArrowPadCommandString&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opToggleComment ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-\&lt;/span&gt;Comment&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text="" created="Sat, 07 Sep 2013 16:56:40 GMT" pgfnum="29953"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opPromote ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-[&lt;/span&gt;Promote&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;opDemote ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-]&lt;/span&gt;Demote&lt;/a&gt;&lt;/li&gt;"/>
														<outline text=""/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;toggleRenderMode ();&quot;&gt;&lt;span class=&quot;menuKeystroke&quot;&gt;Cmd-`&lt;/span&gt;&lt;span id=&quot;idRenderModeCommandString&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;" created="Sun, 28 Jul 2013 18:38:02 GMT" pgfnum="28370"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idDocsMenu&quot;&gt; ">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Docs&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;TBD&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown desktopOnly&quot; id=&quot;idBookmarksMenu&quot; style=&quot;display: none;&quot;&gt; ">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Bookmarks&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot; id=&quot;idBookmarksList&quot;&gt;">
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idFriendsMenu&quot;&gt; " isComment="true">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Friends&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;addFriend ();&quot;&gt;Add Friend...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;addSuggestedUsersCommand ();&quot;&gt;Add Suggested Users...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;highlightFriendsWithUpdates ();&quot;&gt;Check for Updates Now&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;addIndividualTweet ();&quot;&gt;Add Individual Tweet...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;deleteAllTweets ();&quot;&gt;Delete All Tweets...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;unboldAll ();&quot;&gt;Unbold All...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idDaveMenu&quot;&gt; " isComment="true">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Dave&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a href=&quot;http://scripting.com/&quot; target=&quot;_blank&quot;&gt;Scripting News&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a href=&quot;http://thesaurus.land/&quot; target=&quot;_blank&quot;&gt;Thesaurus Land&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a href=&quot;http://little.porkchop.io/&quot; target=&quot;_blank&quot;&gt;Little Pork Chop&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a href=&quot;http://littleoutliner.com/&quot; target=&quot;_blank&quot;&gt;Little Outliner&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a href=&quot;http://fargo.io/&quot; target=&quot;_blank&quot;&gt;Fargo&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a href=&quot;http://littlecardeditor.com/&quot; target=&quot;_blank&quot;&gt;Little Card Editor&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;ul class=&quot;nav pull-right&quot;&gt;">
												<outline text="&lt;li class=&quot;dropdown&quot;&gt;">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;&lt;span id=&quot;idTwitterIcon&quot;&gt;&lt;/span&gt;&lt;span id=&quot;idTwitterUsername&quot;&gt;&lt;/span&gt;&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;aboutDialog ();&quot;&gt;About &lt;span id=&quot;idMenuAboutProductName&quot;&gt;&lt;/span&gt;...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;openSettingsDialog ();&quot;&gt;Settings...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;toggleTwitterConnect ();&quot; id=&quot;idTwitterConnectMenuItem&quot;&gt;&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;" created="Thu, 28 Mar 2013 21:39:17 GMT" pgfnum="21616"/>
							</outline>
						<outline text="&lt;div class=&quot;divSettingsDialog&quot;&gt;">
							<outline text="&lt;div id=&quot;idSettingsDialog&quot; class=&quot;modal hide fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;windowTitleLabel&quot; aria-hidden=&quot;true&quot;&gt;">
								<outline text="&lt;div class=&quot;modal-header&quot;&gt;" isComment="true">
									<outline text="&lt;a href=&quot;#&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&amp;times;&lt;/a&gt;"/>
									<outline text="&lt;h3&gt;Preferences&lt;/h3&gt;"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;modal-body&quot;&gt;">
									<outline text="&lt;div class=&quot;divDialogElements&quot;&gt;">
										<outline text="&lt;%prefs.includeOutline (&quot;http://fargo.io/code/shared/electronland/outlinersettings.opml&quot;)%&gt; " created="Mon, 31 Dec 2012 16:55:33 GMT" pgfnum="16518"/>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;modal-footer&quot;&gt;">
									<outline text="&lt;a href=&quot;#&quot; class=&quot;btn&quot; onclick=&quot;shell.closeSettingsDialog ();&quot;&gt;Cancel&lt;/a&gt;"/>
									<outline text="&lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot; onclick=&quot;shell.okSettingsDialog ();&quot;&gt;OK&lt;/a&gt;"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divTitleDescriptionDialog&quot;&gt;" created="Fri, 10 May 2013 17:29:51 GMT" pgfnum="23716">
							<outline text="&lt;div id=&quot;idTitleDescriptionDialog&quot; class=&quot;modal hide fade&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-hidden=&quot;true&quot;&gt;">
								<outline text="&lt;div class=&quot;modal-header&quot;&gt;">
									<outline text="&lt;a href=&quot;#&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&amp;times;&lt;/a&gt;"/>
									<outline text="&lt;h3&gt;Set titles and description...&lt;/h3&gt;"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;modal-body&quot;&gt;">
									<outline text="&lt;div class=&quot;divDialogElements&quot;&gt;">
										<outline text="&lt;fieldset&gt;">
											<outline text="&lt;div class=&quot;divPrefs&quot;&gt;">
												<outline text="&lt;div class=&quot;clearfix&quot;&gt;">
													<outline text="&lt;label for=&quot;shortTitle&quot;&gt;Short title:&lt;/label&gt;"/>
													<outline text="&lt;div class=&quot;input&quot;&gt;">
														<outline text="&lt;input class=&quot;xlarge prefsInput&quot; id=&quot;idShortTitle&quot; name=&quot;shortTitle&quot; size=&quot;50&quot; type=&quot;text&quot; value=&quot;&quot; placeholder=&quot;The title that's displayed in the tab when the file is open.&quot;&gt;"/>
														<outline text="&lt;/div&gt;"/>
														</outline>
													<outline text="&lt;/div&gt;"/>
													</outline>
												<outline text="&lt;div class=&quot;clearfix&quot;&gt;">
													<outline text="&lt;label for=&quot;longTitle&quot;&gt;Long title:&lt;/label&gt;"/>
													<outline text="&lt;div class=&quot;input&quot;&gt;">
														<outline text="&lt;input class=&quot;xlarge prefsInput&quot; id=&quot;idLongTitle&quot; name=&quot;longTitle&quot; size=&quot;50&quot; type=&quot;text&quot; value=&quot;&quot; placeholder=&quot;The title that's displayed in Reader.&quot;&gt;"/>
														<outline text="&lt;/div&gt;"/>
														</outline>
													<outline text="&lt;/div&gt;"/>
													</outline>
												<outline text="&lt;div class=&quot;clearfix&quot;&gt;">
													<outline text="&lt;label for=&quot;description&quot;&gt;Description:&lt;/label&gt;"/>
													<outline text="&lt;div class=&quot;input&quot;&gt;">
														<outline text="&lt;textarea class=&quot;xxlarge&quot; id=&quot;idDescription&quot; name=&quot;description&quot; cols=&quot;70&quot; rows=&quot;4&quot; placeholder=&quot;How the file is described when shown in Reader.&quot;&gt;&lt;/textarea&gt;"/>
														<outline text="&lt;/div&gt;"/>
														</outline>
													<outline text="&lt;/div&gt;"/>
													</outline>
												<outline text="&lt;/div&gt;"/>
												</outline>
											<outline text="&lt;/fieldset&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;modal-footer&quot;&gt;">
									<outline text="&lt;a href=&quot;#&quot; class=&quot;btn&quot; onclick=&quot;closeTitleDescriptionDialog ();&quot;&gt;Cancel&lt;/a&gt;"/>
									<outline text="&lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot; onclick=&quot;okTitleDescriptionDialog ();&quot;&gt;OK&lt;/a&gt;"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;" created="Fri, 10 May 2013 17:30:07 GMT" pgfnum="23719"/>
							</outline>
						<outline text="&lt;div class=&quot;divPageBody&quot; id=&quot;idPageBody&quot;&gt;">
							<outline text="&lt;div class=&quot;divStatusMessage&quot; id=&quot;idStatusMessageContainer&quot;&gt;">
								<outline text="&lt;div class=&quot;alert alert-info&quot;&gt;">
									<outline text="&lt;span id=&quot;idStatusMessage&quot; /&gt;"/>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;div id=&quot;idTabsContainer&quot;&gt;">
								<outline text="&lt;div class=&quot;divTable&quot;&gt;">
									<outline text="&lt;div class=&quot;divIconContainer&quot;&gt;">
										<outline text="&lt;div class=&quot;divIconBar&quot; id=&quot;idIconBar&quot;&gt;">
											<outline text="&lt;div style=&quot;position: fixed !important&quot; id=&quot;idIconList&quot;&gt;">
												<outline text="&lt;div class=&quot;divIcon&quot;&gt;">
													<outline text="&lt;a href=&quot;#&quot; onclick=&quot;opNewPost ();&quot; data-toggle=&quot;tooltip&quot; title=&quot;New note.&quot;&gt;">
														<outline text="&lt;i class=&quot;fa fa-plus iIcon&quot; id=&quot;idPostIcon&quot;&gt;&lt;/i&gt;"/>
														<outline text="&lt;/a&gt;"/>
														</outline>
													<outline text="&lt;/div&gt;"/>
													</outline>
												<outline text="&lt;div class=&quot;divIcon&quot;&gt;">
													<outline text="&lt;a href=&quot;#&quot; onclick=&quot;linkIconClick ();&quot; data-toggle=&quot;tooltip&quot; title=&quot;Link to another page.&quot;&gt;">
														<outline text="&lt;i class=&quot;fa fa-link iIcon&quot; id=&quot;idLinkIcon&quot;&gt;&lt;/i&gt;"/>
														<outline text="&lt;/a&gt;"/>
														</outline>
													<outline text="&lt;/div&gt;"/>
													</outline>
												<outline text="&lt;div class=&quot;divIcon&quot;&gt;">
													<outline text="&lt;a href=&quot;#&quot; onclick=&quot;editAttributes ();&quot; data-toggle=&quot;tooltip&quot; title=&quot;Edit attributes.&quot;&gt;">
														<outline text="&lt;i class=&quot;fa fa-suitcase iIcon&quot; id=&quot;idEditAttsIcon&quot;&gt;&lt;/i&gt;"/>
														<outline text="&lt;/a&gt;"/>
														</outline>
													<outline text="&lt;/div&gt;"/>
													</outline>
												<outline text="&lt;div class=&quot;divIcon&quot;&gt;">
													<outline text="&lt;a href=&quot;#&quot; onclick=&quot;tweetThisIconClick ();&quot; data-toggle=&quot;tooltip&quot; title=&quot;Tweet the text of the cursor headline.&quot;&gt;">
														<outline text="&lt;i class=&quot;fa fa-twitter iIcon&quot; id=&quot;idTweetThisIcon&quot;&gt;&lt;/i&gt;"/>
														<outline text="&lt;/a&gt;"/>
														</outline>
													<outline text="&lt;/div&gt;"/>
													</outline>
												<outline text="&lt;div class=&quot;divIcon&quot; id=&quot;idIconToInsertAfter&quot;&gt;">
													<outline text="&lt;a href=&quot;#&quot; onclick=&quot;shell.lockIconClick ();&quot; data-toggle=&quot;tooltip&quot; title=&quot;Lock or unlock the current outline display.&quot;&gt;">
														<outline text="&lt;i class=&quot;fa fa-lock iIcon&quot; id=&quot;idLockIcon&quot;&gt;&lt;/i&gt;"/>
														<outline text="&lt;/a&gt;"/>
														</outline>
													<outline text="&lt;/div&gt;"/>
													</outline>
												<outline text="&lt;/div&gt;"/>
												</outline>
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;div class=&quot;divMyTabs&quot; id=&quot;idTabs&quot;&gt;">
										<outline text="&lt;div class=&quot;divSaveStatus&quot; id=&quot;idSaveStatus&quot;&gt;">
											<outline text="&lt;div class=&quot;alert alert-info&quot;&gt;">
												<outline text="&lt;span id=&quot;idStatusMessage&quot; /&gt;"/>
												<outline text="&lt;/div&gt;"/>
												</outline>
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;ul id=&quot;idTabList&quot; class=&quot;nav nav-tabs&quot;&gt;">
											<outline text="&lt;/ul&gt;"/>
											</outline>
										<outline text="&lt;div class=&quot;divTabDisplay&quot; id=&quot;idTabDisplay&quot;&gt;">
											<outline text="&lt;div class=&quot;divEditorContainer&quot; id=&quot;idEditorContainer&quot;&gt;">
												<outline text="&lt;div class=&quot;divEditor&quot; id=&quot;idEditor&quot; placeholder=&quot;Edit your text here.&quot;&gt;" isComment="true">
													<outline text="&lt;/div&gt;"/>
													</outline>
												<outline text="&lt;/div&gt;"/>
												</outline>
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;div class=&quot;divStatusBelowTabs&quot;&gt;">
									<outline text="&lt;div class=&quot;divAttributesDisplay&quot; id=&quot;idAttributesDisplay&quot;&gt;">
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;div class=&quot;divFilepath&quot; id=&quot;idFilepath&quot;&gt;">
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="config.json">
				<outline text="{">
					<outline text="&quot;productname&quot;: &quot;electricOutliner&quot;," created="Sun, 06 Jan 2013 15:39:06 GMT" pgfnum="16734"/>
					<outline text="&quot;productnameForDisplay&quot;: &quot;Electric Outliner&quot;," created="Sun, 06 Jan 2013 15:39:06 GMT" pgfnum="16734"/>
					<outline text="&quot;description&quot;: &quot;The Concord outliner in an Electron shell.&quot;," created="Wed, 07 May 2014 12:04:38 GMT" pgfnum="41257"/>
					<outline text="&quot;urlTwitterServer&quot;: &quot;http://storage.littleoutliner.com/&quot;,"/>
					<outline text="&quot;urlChatLogSocket&quot;: &quot;ws://storage.littleoutliner.com:1242/&quot;,"/>
					<outline text="&quot;outlinesPath&quot;: &quot;electric/&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.43a&quot;" created="Fri, 04 Jan 2013 22:12:08 GMT" pgfnum="16702"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="# electronLand"/>
				<outline text="My shell for Electron apps, along with Electron Outliner."/>
				<outline text="For now a private repo. This serves as a backup of what's on my local system."/>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildElectronLand ()"/>
			</outline>
		</body>
	</opml>
