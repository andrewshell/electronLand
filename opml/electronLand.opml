<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Fri, 05 May 2017 22:31:05 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: electronLand</title>
		<dateCreated>Tue, 25 Apr 2017 15:25:56 GMT</dateCreated>
		<dateModified>Fri, 05 May 2017 22:31:05 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>2, 4, 30, 57, 60, 62, 71, 96</expansionState>
		<vertScrollState>26</vertScrollState>
		<windowTop>72</windowTop>
		<windowLeft>1205</windowLeft>
		<windowBottom>1317</windowBottom>
		<windowRight>2284</windowRight>
		</head>
	<body>
		<outline text="/fargo.io/code/shared/daveutils/">
			<outline text="daveutils.js">
				<outline text="exports.beginsWith = beginsWith; "/>
				<outline text="exports.endsWith = endsWith;"/>
				<outline text="exports.stringCountFields = stringCountFields;"/>
				<outline text="exports.stringDelete = stringDelete;"/>
				<outline text="exports.stringMid = stringMid;"/>
				<outline text="exports.padWithZeros = padWithZeros;"/>
				<outline text="exports.getDatePath = getDatePath;"/>
				<outline text="exports.secondsSince = secondsSince;"/>
				<outline text="exports.bumpUrlString = bumpUrlString;"/>
				<outline text="exports.stringContains = stringContains;"/>
				<outline text="exports.sameDay = sameDay;"/>
				<outline text="exports.jsonStringify = jsonStringify;"/>
				<outline text="exports.stringNthField = stringNthField;"/>
				<outline text="exports.getBoolean = getBoolean;"/>
				<outline text="exports.isAlpha = isAlpha;"/>
				<outline text="exports.isNumeric = isNumeric;"/>
				<outline text="exports.stringLastField = stringLastField;"/>
				<outline text="exports.multipleReplaceAll = multipleReplaceAll;"/>
				<outline text="exports.replaceAll = replaceAll; //2/17/15 by DW"/>
				<outline text="exports.kilobyteString = kilobyteString;"/>
				<outline text="exports.megabyteString = megabyteString;"/>
				<outline text="exports.gigabyteString = gigabyteString;"/>
				<outline text="exports.stringLower = stringLower;"/>
				<outline text="exports.filledString = filledString;"/>
				<outline text="exports.innerCaseName = innerCaseName;"/>
				<outline text="exports.copyScalars = copyScalars;"/>
				<outline text="exports.stripMarkup = stripMarkup;"/>
				<outline text="exports.hotUpText = hotUpText;"/>
				<outline text="exports.sleepTillTopOfMinute = sleepTillTopOfMinute;"/>
				<outline text="exports.random = random;"/>
				<outline text="exports.stringPopLastField = stringPopLastField;"/>
				<outline text="exports.trimWhitespace = trimWhitespace;"/>
				<outline text="exports.dateYesterday = dateYesterday;"/>
				<outline text="exports.maxStringLength = maxStringLength;"/>
				<outline text="exports.stringPopExtension = stringPopExtension;"/>
				<outline text="exports.getFileModDate = getFileModDate;"/>
				<outline text="exports.getFacebookTimeString = getFacebookTimeString;"/>
				<outline text="exports.viewDate = viewDate;"/>
				<outline text=""/>
				<outline text="var fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="[[http://fargo.io/code/node/shared/utils.js]]"/>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;daveutils&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A set of JavaScript routines I was including in all my projects, so I made it into a package.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.4&quot;,"/>
					<outline text="&quot;main&quot;: &quot;daveutils.js&quot;,"/>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;daveutils.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="#### My handsome readme"/>
				<outline text="When I came to Node, three years ago, I started this file, utils.js, to put all the utility routines I knew I'd need. I've been programming a long time. And there are certain things you don't want to have to rewrite. So you put them in a file and when you need a new one you just add it to that file."/>
				<outline text="Then in April 2017 I got tired of including that file in all my projects. Not that I was replicating code, I wasn't. It was just a little bit more work than it had to be. So I made an NPM package out of it, so I could just do this:"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="And include it in my package.json file, and that's that. "/>
				<outline text="And this is that package. "/>
				<outline text="Now you know the whole story! ;-)"/>
				</outline>
			</outline>
		<outline text="/fargo.io/code/shared/electronland/">
			<outline text="lib/electron.js">
				<outline text="exports.init = init;"/>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;);  "/>
				<outline text="const http = require (&quot;http&quot;);"/>
				<outline text="const urlpack = require (&quot;url&quot;);"/>
				<outline text="const electron = require (&quot;electron&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text=""/>
				<outline text="var mainWindow = null; "/>
				<outline text="var flOpenUrlsInExternalBrowser = true, urlMainWindow; "/>
				<outline text="var bullMancuso = undefined;"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="userDataFolder: undefined,"/>
					<outline text="flOpenDevToolsAtStart: false,"/>
					<outline text="flPreventAppSuspension: false,"/>
					<outline text="mainWindowWidth: 1100,"/>
					<outline text="mainWindowHeight: 1000,"/>
					<outline text="iconPath: &quot;app.png&quot;,"/>
					<outline text="urlTwitterServer: &quot;http://twitter.porkchop.io/&quot;,"/>
					<outline text="oauthWaitPort: 1403,"/>
					<outline text=""/>
					<outline text="indexfilename: &quot;outlinerindex.html&quot;, //5/1/17 by DW"/>
					<outline text="acceptableFileExtensions: [&quot;opml&quot;]"/>
					<outline text=""/>
					<outline text="indexfilename: &quot;aceindex.html&quot;, //5/1/17 by DW" isComment="true"/>
					<outline text="acceptableFileExtensions: [&quot;txt&quot;, &quot;js&quot;, &quot;xml&quot;, &quot;html&quot;]" isComment="true"/>
					<outline text="};"/>
					</outline>
				<outline text="var fnameConfig = &quot;config.json&quot;;"/>
				<outline text=""/>
				<outline text="var stats = {">
					<outline text="ctStarts: 0,"/>
					<outline text="ctSeconds: 0,"/>
					<outline text="ctStatsWrites: 0"/>
					<outline text="};"/>
					</outline>
				<outline text="var fnameStats = &quot;stats.json&quot;, flStatsChanged = false;"/>
				<outline text=""/>
				<outline text="function debugMessage (s) {">
					<outline text="Changes" isComment="true">
						<outline text="3/11/17; 10:56:23 AM by DW">
							<outline text="Send the message in a try in case the window on the other side is closed."/>
							</outline>
						</outline>
					<outline text="console.log (s);"/>
					<outline text="try {">
						<outline text="if (bullMancuso !== undefined) {">
							<outline text="bullMancuso.send (&quot;debugMessage&quot;, s);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="catch (err) {">
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function statsChanged () {">
					<outline text="flStatsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function fsSureFilePathSync (path) { ">
					<outline text="var splits = path.split (&quot;/&quot;);"/>
					<outline text="path = &quot;&quot;; "/>
					<outline text="if (splits.length &gt; 0) {">
						<outline text="function doLevel (levelnum) {">
							<outline text="if (levelnum &lt; (splits.length - 1)) {">
								<outline text="path += splits [levelnum] + &quot;/&quot;;"/>
								<outline text="if (fs.existsSync (path)) {">
									<outline text="doLevel (levelnum + 1);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="fs.mkdirSync (path, undefined);"/>
									<outline text="doLevel (levelnum + 1);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="doLevel (0);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (true);"/>
					<outline text="}"/>
					</outline>
				<outline text="function fsSureFilePath (path, callback) { ">
					<outline text="var splits = path.split (&quot;/&quot;);"/>
					<outline text="path = &quot;&quot;; //1/8/15 by DW"/>
					<outline text="if (splits.length &gt; 0) {">
						<outline text="function doLevel (levelnum) {">
							<outline text="if (levelnum &lt; (splits.length - 1)) {">
								<outline text="path += splits [levelnum] + &quot;/&quot;;"/>
								<outline text="fs.exists (path, function (flExists) {">
									<outline text="if (flExists) {">
										<outline text="doLevel (levelnum + 1);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="fs.mkdir (path, undefined, function () {">
											<outline text="doLevel (levelnum + 1);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (callback != undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="doLevel (0);"/>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="if (callback != undefined) {">
							<outline text="callback ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function fsSureFolder (folder, callback) {">
					<outline text="fsSureFilePath (folder + &quot;x&quot;, callback);"/>
					<outline text="return (folder);"/>
					<outline text="}"/>
					</outline>
				<outline text="function fsIsFolder (path) {">
					<outline text="return (fs.statSync (path).isDirectory ());"/>
					<outline text="}"/>
					</outline>
				<outline text="function getLocalFilePath (relpath) {">
					<outline text="return (config.userDataFolder + relpath);"/>
					<outline text="}"/>
					</outline>
				<outline text="function writeUserDataFile (path, config) {">
					<outline text="var f = getLocalFilePath (path);"/>
					<outline text="debugMessage (&quot;writeUserDataFile: f == &quot; + f);" isComment="true"/>
					<outline text="fsSureFilePath (f, function () {">
						<outline text="fs.writeFile (f, utils.jsonStringify (config), function (err) {">
							<outline text="if (err) {">
								<outline text="debugMessage (&quot;writeUserDataFile: error writing file &quot; + f + &quot; == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readUserDataFile (path, config, callback) {">
					<outline text="var f = getLocalFilePath (path);"/>
					<outline text="debugMessage (&quot;readUserDataFile: f == &quot; + f);"/>
					<outline text="fsSureFilePath (f, function () {">
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="debugMessage (&quot;readUserDataFile: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function sureConfigJson (callback) { //4/18/17 by DW">
					<outline text="Changes" isComment="true">
						<outline text="4/18/17; 10:25:43 AM by DW">
							<outline text="Create a config.json file with some basic values if one doesn't exist, so a user has a place to start, and an example to follow. "/>
							</outline>
						</outline>
					<outline text="var f = getLocalFilePath (fnameConfig);"/>
					<outline text="var initConfig = {">
						<outline text="flOpenDevToolsAtStart: config.flOpenDevToolsAtStart"/>
						<outline text="};"/>
						</outline>
					<outline text="fsSureFilePath (f, function () {">
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (err) {">
								<outline text="try {">
									<outline text="fs.writeFile (f, utils.jsonStringify (initConfig), function (err) {">
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="debugMessage (&quot;sureConfigJson: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function updateConfigJson (theConfigSubset, callback) { //4/21/17 by DW">
					<outline text="var f = getLocalFilePath (fnameConfig);"/>
					<outline text="fsSureFilePath (f, function () {">
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="var theFullConfig = new Object ();"/>
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="theFullConfig = JSON.parse (data.toString ());"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="for (var x in theConfigSubset) {">
								<outline text="theFullConfig [x] = theConfigSubset [x]; "/>
								<outline text="}"/>
								</outline>
							<outline text="fs.writeFile (f, utils.jsonStringify (theFullConfig), function (err) {">
								<outline text="});"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readConfig (f, config, callback) {">
					<outline text="console.log (&quot;readConfig: f == &quot; + f); "/>
					<outline text="fsSureFilePath (f, function () {">
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="console.log (utils.jsonStringify (jstruct)); "/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="debugMessage (&quot;readConfig: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function electronStartup () {">
					<outline text="var myHttpServer = undefined;"/>
					<outline text="function tinyHttpServer (httpRequest, httpResponse) {">
						<outline text="var parsedUrl = urlpack.parse (httpRequest.url, true);" created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078"/>
						<outline text="debugMessage (&quot;tinyHttpServer: parsedUrl == \n&quot; + JSON.stringify (parsedUrl, undefined, 4));"/>
						<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});"/>
						<outline text="httpResponse.end (&quot;Welcome to the camp!&quot;);"/>
						<outline text="if (parsedUrl.search.length &gt; 0) { //don't open a window for /favicon.ico for example -- 4/16/16 by DW">
							<outline text="electronOpenHomePage (parsedUrl.search);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (config.flPreventAppSuspension) {">
						<outline text="electron.powerSaveBlocker.start (&quot;prevent-app-suspension&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="electron.app.on (&quot;ready&quot;, function () { ">
						<outline text="mainWindow = new electron.BrowserWindow ({">
							<outline text="width: config.mainWindowWidth, "/>
							<outline text="height: config.mainWindowHeight,"/>
							<outline text="icon: __dirname + &quot;/&quot; + config.iconPath"/>
							<outline text="});"/>
							</outline>
						<outline text="mainWindow.on (&quot;closed&quot;, function () {">
							<outline text="mainWindow = null;"/>
							<outline text="});"/>
							</outline>
						<outline text="mainWindow.webContents.on (&quot;will-navigate&quot;, function (event, url) { ">
							<outline text="if (flOpenUrlsInExternalBrowser) { ">
								<outline text="electron.shell.openExternal (url);"/>
								<outline text="event.preventDefault ();"/>
								<outline text="}"/>
								</outline>
							<outline text="if (utils.beginsWith (urlMainWindow, url)) {">
								<outline text="setTimeout (function () {">
									<outline text="debugMessage (&quot;About to set flOpenUrlsInExternalBrowser true.&quot;);"/>
									<outline text="flOpenUrlsInExternalBrowser = true;"/>
									<outline text="}, 1000);"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="electron.app.on (&quot;window-all-closed&quot;, function () { ">
						<outline text="electron.app.quit ();"/>
						<outline text="});"/>
						</outline>
					<outline text="electron.ipcMain.on (&quot;asynch-message&quot;, function (event, arg1, arg2, arg3) {">
						<outline text="debugMessage (&quot;defaultHandleAsyncMessage: &quot; + arg1 + &quot;, arg2 == &quot; + arg2 + &quot;, arg3 == &quot; + arg3);"/>
						<outline text="switch (arg1) {">
							<outline text="case &quot;hello&quot;:">
								<outline text="bullMancuso = event.sender;"/>
								<outline text="debugMessage (&quot;hello message received&quot;);"/>
								<outline text="bullMancuso.send (&quot;config&quot;, utils.jsonStringify (config));"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;runScript&quot;:" isComment="true">
								<outline text="var val;"/>
								<outline text="debugMessage (&quot;runScript: &quot; + arg2);"/>
								<outline text="try {">
									<outline text="val = runUserScript (arg2, &quot;quickscript&quot;);"/>
									<outline text="debugMessage (&quot;runScript: val == &quot; + val);"/>
									<outline text="event.sender.send (&quot;scriptReturnVal&quot;, val);"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="debugMessage (&quot;runScript: err.message == &quot; + err.message);"/>
									<outline text="event.sender.send (&quot;scriptReturnVal&quot;, undefined, err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;sendTweet&quot;:" isComment="true">
								<outline text="debugMessage (&quot;sendTweet: &quot; + arg2);"/>
								<outline text="try {">
									<outline text="readConfig (config.fnameTwitterCredentials, twitterCredentials, function () {">
										<outline text="debugMessage (&quot;sendTweet: twitterCredentials == &quot; + utils.jsonStringify (twitterCredentials));"/>
										<outline text="twitterLib.startup (appConsts, debugMessage); //send over the app credentials"/>
										<outline text="twitterLib.tweet (arg2, arg3, debugMessage, function (jsontext, errorjsontext) {">
											<outline text="if (errorjsontext !== undefined) { //3/4/17 by DW">
												<outline text="debugMessage (&quot;sendTweet: errorjsontext == &quot; + errorjsontext);"/>
												<outline text="}"/>
												</outline>
											<outline text="event.sender.send (&quot;tweetReturnVal&quot;, jsontext, errorjsontext);"/>
											<outline text="});"/>
											</outline>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="debugMessage (&quot;sendTweet: err.message == &quot; + err.message);"/>
									<outline text="event.sender.send (&quot;tweetReturnVal&quot;, undefined, err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;setTwitterCredentials&quot;:" isComment="true">
								<outline text="twitterLib.setUserCredentials (arg2);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;openUrl&quot;: ">
								<outline text="electron.shell.openExternal (arg2);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;openFolder&quot;: ">
								<outline text="electron.shell.showItemInFolder (arg2);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;httpRequest&quot;:" isComment="true">
								<outline text="feedToolsRequest (arg2, arg3, function (headers, val) {">
									<outline text="event.sender.send (&quot;httpReturnVal&quot;, headers, val);"/>
									<outline text="});"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;readAllFeedsNow&quot;: //4/18/17 by DW" isComment="true">
								<outline text="feedtools.readAllFeedsNow ();"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;setConfig&quot;: //4/21/17 by DW">
								<outline text="var theConfigSubset = JSON.parse (arg2);"/>
								<outline text="for (x in theConfigSubset) {">
									<outline text="config [x] = theConfigSubset [x];"/>
									<outline text="}"/>
									</outline>
								<outline text="updateConfigJson (theConfigSubset);"/>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="electron.ipcMain.on (&quot;synchronous-message&quot;, function (event, arg) {">
						<outline text="debugMessage (&quot;IPC message received == &quot; + arg);"/>
						<outline text="switch (arg) {">
							<outline text="case &quot;waitForOAuth&quot;:">
								<outline text="flOpenUrlsInExternalBrowser = false; "/>
								<outline text="if (myHttpServer === undefined) { //4/15/16 by DW -- can't do this twice">
									<outline text="myHttpServer = http.createServer (tinyHttpServer);"/>
									<outline text="myHttpServer.listen (config.oauthWaitPort);"/>
									<outline text="}"/>
									</outline>
								<outline text="event.returnValue = config.oauthWaitPort;"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;getConfig&quot;: //4/21/17 by DW">
								<outline text="event.returnValue = utils.jsonStringify (config);"/>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function electronOpenHomePage (queryString) {">
					<outline text="Changes" isComment="true">
						<outline text="3/29/17; 10:39:26 AM by DW">
							<outline text="I was thinking about changing it so we load the home page over HTTP, and then remembered the reason we don't do that is because I don't want to run the web server here, so the user doesn't have to deal with the dialog that requests permission for the app to be accessible over HTTP. "/>
							</outline>
						</outline>
					<outline text="urlMainWindow = &quot;file://&quot; + config.appDirname + &quot;/&quot; + config.indexfilename + queryString; //set global"/>
					<outline text="console.log (&quot;electronOpenHomePage: urlMainWindow == &quot; + urlMainWindow);"/>
					<outline text="mainWindow.loadURL (urlMainWindow);"/>
					<outline text="if (config.flOpenDevToolsAtStart) {" isComment="true">
						<outline text="mainWindow.webContents.openDevTools ();"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="var now = new Date ();"/>
					<outline text="stats.ctSeconds++; "/>
					<outline text="stats.whenLastEverySecond = now;"/>
					<outline text="if (flStatsChanged) {">
						<outline text="flStatsChanged = false;"/>
						<outline text="stats.ctStatsWrites++;"/>
						<outline text="stats.whenLastStatsWrite = now;"/>
						<outline text="writeUserDataFile (fnameStats, stats);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function init (configParam, callback) {">
					<outline text="var now = new Date ();"/>
					<outline text=""/>
					<outline text="if (config !== undefined) {">
						<outline text="for (x in configParam) {">
							<outline text="config [x] = configParam [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="console.log (&quot;electronLand.init: config == &quot; + utils.jsonStringify (config));"/>
					<outline text=""/>
					<outline text="electronStartup ();"/>
					<outline text="config.userDataFolder = electron.app.getPath (&quot;userData&quot;) + &quot;/&quot; + config.productname + &quot;/&quot;; "/>
					<outline text="fsSureFolder (config.userDataFolder, function () {">
						<outline text="readConfig (fnameConfig, config, function () {">
							<outline text="readUserDataFile (fnameConfig, config, function () {">
								<outline text="console.log (&quot;startup config == &quot; + utils.jsonStringify (config));"/>
								<outline text="readUserDataFile (fnameStats, stats, function () {">
									<outline text="stats.ctStarts++;"/>
									<outline text="stats.whenLastStart = now;"/>
									<outline text="statsChanged ();"/>
									<outline text="sureConfigJson (); //make sure there's a config.json in the user's data directory"/>
									<outline text="electronOpenHomePage (&quot;&quot;);"/>
									<outline text="setInterval (everySecond, 1000); "/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="lib/electronshell.js">
				<outline text="exports.init = init;"/>
				<outline text="exports.getConfig = shellGetConfig; //5/3/17 by DW"/>
				<outline text="exports.openUrl = shellOpenUrl;"/>
				<outline text="exports.openFolder = shellOpenFolder;"/>
				<outline text="exports.openUserDataFolder = shellOpenUserDataFolder;"/>
				<outline text="exports.toggleTwitterConnect = shellToggleTwitterConnect;"/>
				<outline text="exports.openFileDialog = shellOpenFileDialog;"/>
				<outline text="exports.newFileDialog = shellNewFileDialog;"/>
				<outline text="exports.openSettingsDialog = shellOpenSettingsDialog;"/>
				<outline text="exports.closeSettingsDialog = settingsCloseDialog;"/>
				<outline text="exports.okSettingsDialog = settingsOkClicked;"/>
				<outline text="exports.getPrefs = shellGetPrefs;"/>
				<outline text="exports.setPrefs = shellSetPrefs;"/>
				<outline text="exports.addTab = addTab;"/>
				<outline text="exports.addInstantTab = addInstantTab;"/>
				<outline text="exports.tabClick = tabClick;"/>
				<outline text="exports.closeTab = closeTab;"/>
				<outline text="exports.getCurrentTab = getCurrentTab;"/>
				<outline text="exports.getTabsArray = getTabsArray;"/>
				<outline text="exports.lockIconClick = lockIconClick;"/>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;);  "/>
				<outline text="const electron = require (&quot;electron&quot;);"/>
				<outline text=""/>
				<outline text="var config = undefined;"/>
				<outline text="var prefs = {">
					<outline text="appPrefs: new Object (),"/>
					<outline text="myTabs: new Array (),"/>
					<outline text="ixCurrentTab: 0,"/>
					<outline text="ctPrefsSaves: 0,"/>
					<outline text="whenLastPrefsSave: undefined"/>
					<outline text="};"/>
					</outline>
				<outline text="var fnamePrefs = &quot;prefs.json&quot;;"/>
				<outline text="var flPrefsChanged = false;"/>
				<outline text=""/>
				<outline text="var appOptions = undefined; //callbacks provided by the app"/>
				<outline text=""/>
				<outline text="function setStatusMessage (s) {">
					<outline text="var visibility = &quot;visible&quot;;"/>
					<outline text="if (s.length == 0) {">
						<outline text="visibility = &quot;hidden&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="$(&quot;#idStatusMessageContainer&quot;).css (&quot;visibility&quot;, visibility);"/>
					<outline text="$(&quot;#idStatusMessage&quot;).html (s);"/>
					<outline text="}"/>
					</outline>
				<outline text="function shellGetConfig () { //4/21/17 by DW">
					<outline text="Changes" isComment="true">
						<outline text="4/21/17; 12:57:12 PM by DW">
							<outline text="Get a copy of the config struct from Node-Land."/>
							</outline>
						</outline>
					<outline text="var theConfig = JSON.parse (require (&quot;electron&quot;).ipcRenderer.sendSync (&quot;synchronous-message&quot;, &quot;getConfig&quot;)); "/>
					<outline text="return (theConfig);"/>
					<outline text="}"/>
					</outline>
				<outline text="function shellSetConfig (theConfigSubset) { //4/21/17 by DW">
					<outline text="Changes" isComment="true">
						<outline text="4/21/17; 12:57:12 PM by DW">
							<outline text="Send part of the config struct to Node-Land."/>
							</outline>
						</outline>
					<outline text="require (&quot;electron&quot;).ipcRenderer.send (&quot;asynch-message&quot;, &quot;setConfig&quot;, jsonStringify (theConfigSubset));  "/>
					<outline text="}"/>
					</outline>
				<outline text="function shellSetupSystemMenus () { ">
					<outline text="electron.remote.app.setName (config.productnameForDisplay); "/>
					<outline text="var template = [">
						<outline text="{ //Edit menu">
							<outline text="label: 'Edit',"/>
							<outline text="submenu: [">
								<outline text="{">
									<outline text="label: 'Undo',"/>
									<outline text="accelerator: 'CmdOrCtrl+Z',"/>
									<outline text="role: 'undo'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Redo',"/>
									<outline text="accelerator: 'Shift+CmdOrCtrl+Z',"/>
									<outline text="role: 'redo'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="type: 'separator'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Cut',"/>
									<outline text="accelerator: 'CmdOrCtrl+X',"/>
									<outline text="role: 'cut'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Copy',"/>
									<outline text="accelerator: 'CmdOrCtrl+C',"/>
									<outline text="role: 'copy'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Paste',"/>
									<outline text="accelerator: 'CmdOrCtrl+V',"/>
									<outline text="role: 'paste'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Select All',"/>
									<outline text="accelerator: 'CmdOrCtrl+A',"/>
									<outline text="role: 'selectall'"/>
									<outline text="},"/>
									</outline>
								<outline text="]"/>
								</outline>
							<outline text="},"/>
							</outline>
						<outline text="{ //Window menu">
							<outline text="label: 'Window',"/>
							<outline text="role: 'window',"/>
							<outline text="submenu: [">
								<outline text="{">
									<outline text="label: 'Minimize',"/>
									<outline text="accelerator: 'CmdOrCtrl+M',"/>
									<outline text="role: 'minimize'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Close',"/>
									<outline text="accelerator: 'CmdOrCtrl+W',"/>
									<outline text="role: 'close'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="type: 'separator'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Reload',"/>
									<outline text="accelerator: 'CmdOrCtrl+R',"/>
									<outline text="click: function(item, focusedWindow) {">
										<outline text="if (focusedWindow)">
											<outline text="focusedWindow.reload();"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'JavaScript console...',"/>
									<outline text="accelerator: (function() {">
										<outline text="if (process.platform == 'darwin')">
											<outline text="return 'Alt+Command+I';"/>
											</outline>
										<outline text="else">
											<outline text="return 'Ctrl+Shift+I';"/>
											</outline>
										<outline text="})(),"/>
										</outline>
									<outline text="click: function(item, focusedWindow) {">
										<outline text="if (focusedWindow)">
											<outline text="focusedWindow.toggleDevTools();"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="]"/>
								</outline>
							<outline text="},"/>
							</outline>
						<outline text="];"/>
						</outline>
					<outline text="if (process.platform == 'darwin') {">
						<outline text="const dialog = electron.remote.dialog;"/>
						<outline text="var aboutDialogOptions = {">
							<outline text="type: &quot;info&quot;,"/>
							<outline text="title: &quot;About Dialog&quot;,"/>
							<outline text="buttons: [&quot;OK&quot;],"/>
							<outline text="message: config.productnameForDisplay + &quot; v&quot; + config.version,"/>
							<outline text="detail: config.description"/>
							<outline text="};"/>
							</outline>
						<outline text="template.unshift ({">
							<outline text="label: config.productnameForDisplay,"/>
							<outline text="submenu: [">
								<outline text="{">
									<outline text="label: 'About ' + config.productnameForDisplay + &quot;...&quot;,"/>
									<outline text="click: function () {">
										<outline text="dialog.showMessageBox (aboutDialogOptions);"/>
										<outline text="}"/>
										</outline>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="type: 'separator'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Services',"/>
									<outline text="role: 'services',"/>
									<outline text="submenu: []"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="type: 'separator'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Hide ' + name,"/>
									<outline text="accelerator: 'Command+H',"/>
									<outline text="role: 'hide'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Hide Others',"/>
									<outline text="accelerator: 'Command+Alt+H',"/>
									<outline text="role: 'hideothers'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Show All',"/>
									<outline text="role: 'unhide'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="type: 'separator'"/>
									<outline text="},"/>
									</outline>
								<outline text="{">
									<outline text="label: 'Quit',"/>
									<outline text="accelerator: 'Command+Q',"/>
									<outline text="click: function () {electron.remote.app.quit ();}"/>
									<outline text="},"/>
									</outline>
								<outline text="]"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="var theMenu = electron.remote.Menu.buildFromTemplate (template);"/>
					<outline text="electron.remote.Menu.setApplicationMenu (theMenu);"/>
					<outline text="}"/>
					</outline>
				<outline text="function shellSetupIpcHandlers () {">
					<outline text="console.log (&quot;setupIpcHandlers&quot;);"/>
					<outline text="const ipcRenderer = require (&quot;electron&quot;).ipcRenderer;"/>
					<outline text="ipcRenderer.on (&quot;debugMessage&quot;, function (event, s) {">
						<outline text="console.log (s + &quot; [main thread]&quot;);"/>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;webSocketCallback&quot;, function (event, s) {">
						<outline text="webSocketProcessMessage (s);"/>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;statsChangedCallback&quot;, function (event, jsontext) {">
						<outline text="dashboardStatsChanged (jsontext);"/>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.send (&quot;asynch-message&quot;, &quot;hello&quot;);  //so the main thread knows how to call us"/>
					<outline text="" isComment="true"/>
					<outline text="" isComment="true"/>
					<outline text="ipcRenderer.on (&quot;config&quot;, function (event, jsontext) {" isComment="true">
						<outline text="console.log (&quot;shellSetupIpcHandlers, on config: jsontext == &quot; + jsontext);"/>
						<outline text="var configFromTheOtherSide = JSON.parse (jsontext);"/>
						<outline text="for (var x in configFromTheOtherSide) {">
							<outline text="appPrefs [x] = configFromTheOtherSide [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="shellConsts = JSON.parse (jsontext);" isComment="true"/>
						<outline text="shellReadPrefs ();" isComment="true"/>
						<outline text="" isComment="true"/>
						<outline text="if (shellConsts.flQuickScriptEditor) { //3/17/17 by DW" isComment="true">
							<outline text="$(&quot;#idScriptInterface&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="$(&quot;#idDataFolderDisplay&quot;).text (shellConsts.userDataFolder);" isComment="true"/>
						<outline text="$(&quot;#idVersionNumber&quot;).html (&quot;v&quot; + shellConsts.version);" isComment="true"/>
						<outline text="$(&quot;#idMenuProductName&quot;).html (shellConsts.productnameForDisplay);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;httpReturnVal&quot;, function (event, headers, val, callback) {" isComment="true">
						<outline text="console.log (&quot;httpReturnVal: val == &quot; + val);"/>
						<outline text="if (callback !== undefined) {">
							<outline text="callback (val);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;config&quot;, function (event, jsontext) {" isComment="true">
						<outline text="console.log (&quot;config: jsontext == &quot; + jsontext);"/>
						<outline text="shellConsts = JSON.parse (jsontext);"/>
						<outline text="shellReadPrefs ();"/>
						<outline text=""/>
						<outline text="if (shellConsts.flQuickScriptEditor) { //3/17/17 by DW">
							<outline text="$(&quot;#idScriptInterface&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="$(&quot;#idDataFolderDisplay&quot;).text (shellConsts.userDataFolder);" isComment="true"/>
						<outline text="$(&quot;#idVersionNumber&quot;).html (&quot;v&quot; + shellConsts.version);" isComment="true"/>
						<outline text="$(&quot;#idMenuProductName&quot;).html (shellConsts.productnameForDisplay);" isComment="true"/>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;callback&quot;, function (event, verb, param1) {" isComment="true">
						<outline text="console.log (&quot;callback: verb == &quot; + verb + &quot;, param1 == &quot; + param1);" isComment="true"/>
						<outline text="var package = JSON.parse (param1);"/>
						<outline text="switch (verb) {">
							<outline text="case &quot;consoleLog&quot;:">
								<outline text="console.log (package.text);"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;msg&quot;:">
								<outline text="shellPrefs.msgs [package.path] = package.text;"/>
								<outline text="$(&quot;#idScriptMsg&quot;).text (jsonStringify (shellPrefs.msgs));"/>
								<outline text="prefsChanged ();"/>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;alertDialog&quot;:">
								<outline text="alertDialog (package.text);"/>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;askDialog&quot;, function (event, prompt, defaultValue, placeholder, callback) {" isComment="true">
						<outline text="askDialog (prompt, defaultValue, placeholder, callback);"/>
						<outline text="});"/>
						</outline>
					<outline text="ipcRenderer.on (&quot;scriptReturnVal&quot;, function (event, val, errorMessage) {" isComment="true">
						<outline text="if (errorMessage !== undefined) {">
							<outline text="$(&quot;#idQuickScriptValue&quot;).html (errorMessage);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (val == null) {">
								<outline text="val = &quot;null&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="$(&quot;#idQuickScriptValue&quot;).html (val.toString ());"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function shellOpenUrl (url) {">
					<outline text="require (&quot;electron&quot;).ipcRenderer.send (&quot;asynch-message&quot;, &quot;openUrl&quot;, url);  "/>
					<outline text="}"/>
					</outline>
				<outline text="function shellOpenFolder (folder) {">
					<outline text="require (&quot;electron&quot;).ipcRenderer.send (&quot;asynch-message&quot;, &quot;openFolder&quot;, folder);  "/>
					<outline text="}"/>
					</outline>
				<outline text="function shellOpenUserDataFolder () {">
					<outline text="shellOpenFolder (config.userDataFolder + &quot;config.json&quot;);"/>
					<outline text="}"/>
					</outline>
				<outline text="function shellOpenFileDialog (callback) {">
					<outline text="var options = {">
						<outline text="defaultPath: config.userDataFolder"/>
						<outline text="};"/>
						</outline>
					<outline text="electron.remote.dialog.showOpenDialog (options, function (theFiles) {">
						<outline text="if (theFiles !== undefined) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (theFiles);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}); "/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function shellNewFileDialog (callback) {">
					<outline text="var options = {">
						<outline text="title: &quot;Name of the new file?&quot;,"/>
						<outline text="filters: [">
							<outline text="{name: 'text', extensions: config.acceptableFileExtensions}"/>
							<outline text="]"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="electron.remote.dialog.showSaveDialog (options, function (f) {">
						<outline text="if (f !== undefined) {">
							<outline text="var flHasLegalExtension = false;" isComment="true"/>
							<outline text="for (var i = 0; i &lt; config.acceptableFileExtensions.length; i++) {" isComment="true">
								<outline text="var ext = &quot;.&quot; + config.acceptableFileExtensions [i];"/>
								<outline text="if (endsWith (stringLower (f), ext)) {">
									<outline text="flHasLegalExtension = true;"/>
									<outline text="break;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (!flHasLegalExtension) {" isComment="true">
								<outline text="f += &quot;.&quot; + config.acceptableFileExtensions [0];"/>
								<outline text="}"/>
								</outline>
							<outline text="console.log (&quot;shellNewFileDialog: theFile == &quot; + f);"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (f);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}); "/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function shellHttpRequest (path, method, callback) { //call into the River5 server, running over in Node-Land" isComment="true">
					<outline text="Changes" isComment="true">
						<outline text="3/24/17; 11:37:47 AM by DW">
							<outline text="Makes the equivalent of an HTTP request into the River5 server, without using HTTP."/>
							</outline>
						</outline>
					<outline text="var electron = require (&quot;electron&quot;);"/>
					<outline text="if (method === undefined) {">
						<outline text="method = &quot;GET&quot;;"/>
						<outline text="}"/>
						</outline>
					<outline text="electron.ipcRenderer.once (&quot;httpReturnVal&quot;, function (event, headers, val) {">
						<outline text="if (callback !== undefined) {">
							<outline text="callback (val);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="electron.ipcRenderer.send (&quot;asynch-message&quot;, &quot;httpRequest&quot;, method, path);  "/>
					<outline text="}"/>
					</outline>
				<outline text="function shellToggleTwitterConnect () {">
					<outline text="function waitForOAuth () {">
						<outline text="return (require (&quot;electron&quot;).ipcRenderer.sendSync (&quot;synchronous-message&quot;, &quot;waitForOAuth&quot;));"/>
						<outline text="}"/>
						</outline>
					<outline text="function specialConnect () {" created="Mon, 10 Jun 2013 18:07:32 GMT" pgfnum="25623">
						<outline text="var myPort = waitForOAuth (); //starts up the HTTP server waiting for a response"/>
						<outline text="var urlMyLocation = &quot;http://localhost:&quot; + myPort + &quot;/&quot;;"/>
						<outline text="console.log (&quot;\nspecialConnect: urlMyLocation == &quot; + urlMyLocation);"/>
						<outline text="var urlRedirectTo = config.urlTwitterServer + &quot;connect?redirect_url=&quot; + encodeURIComponent (urlMyLocation);" created="Mon, 28 Apr 2014 12:43:45 GMT" pgfnum="40579"/>
						<outline text="shell.openUrl (urlRedirectTo, false);" isComment="true"/>
						<outline text="window.location.href = urlRedirectTo;" created="Mon, 28 Apr 2014 12:43:28 GMT" pgfnum="40575"/>
						<outline text="}" created="Mon, 10 Jun 2013 18:19:49 GMT" pgfnum="25632"/>
						</outline>
					<outline text="if (twIsTwitterConnected ()) {" created="Thu, 13 Jun 2013 23:05:12 GMT" pgfnum="26117">
						<outline text="confirmDialog (&quot;Sign off Twitter?&quot;, function () {" created="Wed, 27 Feb 2013 16:18:09 GMT" pgfnum="19236">
							<outline text="twDisconnectFromTwitter ();" created="Mon, 28 Apr 2014 13:26:36 GMT" pgfnum="40601"/>
							<outline text="});" created="Sun, 14 Apr 2013 02:15:30 GMT" pgfnum="22673"/>
							</outline>
						<outline text="}" created="Thu, 13 Jun 2013 23:05:15 GMT" pgfnum="26118"/>
						</outline>
					<outline text="else {" created="Thu, 13 Jun 2013 23:05:16 GMT" pgfnum="26119">
						<outline text="specialConnect ();" created="Thu, 13 Jun 2013 23:05:41 GMT" pgfnum="26122"/>
						<outline text="}" created="Thu, 13 Jun 2013 23:05:19 GMT" pgfnum="26120"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="//settings dialog">
					<outline text="var saveSettingsCallback = undefined;"/>
					<outline text=""/>
					<outline text="function settingsGetValuesFromDialog (appPrefs) {">
						<outline text="var inputs = document.getElementById (&quot;idSettingsDialog&quot;).getElementsByTagName (&quot;input&quot;), i;" created="Fri, 04 Jan 2013 13:12:48 GMT" pgfnum="16622"/>
						<outline text="for (var i = 0; i &lt; inputs.length; i++) {">
							<outline text="if (inputs [i].type == &quot;checkbox&quot;) {" created="Fri, 11 Jan 2013 19:19:38 GMT" pgfnum="17047">
								<outline text="appPrefs [inputs [i].name] = inputs [i].checked;"/>
								<outline text="}" created="Fri, 11 Jan 2013 19:19:55 GMT" pgfnum="17050"/>
								</outline>
							<outline text="else {" created="Fri, 11 Jan 2013 19:19:56 GMT" pgfnum="17051">
								<outline text="appPrefs [inputs [i].name] = inputs [i].value;"/>
								<outline text="}" created="Fri, 11 Jan 2013 19:20:00 GMT" pgfnum="17052"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="var textareas = document.getElementById (&quot;idSettingsDialog&quot;).getElementsByTagName (&quot;textarea&quot;), i;" created="Fri, 04 Jan 2013 13:12:48 GMT" pgfnum="16622"/>
						<outline text="for (var i = 0; i &lt; textareas.length; i++) {">
							<outline text="appPrefs [textareas [i].name] = textareas [i].value;"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function settingsSetDefaultValues (appPrefs) {">
						<outline text="var inputs = document.getElementById (&quot;idSettingsDialog&quot;).getElementsByTagName (&quot;input&quot;), i;" created="Fri, 04 Jan 2013 13:12:48 GMT" pgfnum="16622"/>
						<outline text="for (var i = 0; i &lt; inputs.length; i++) {">
							<outline text="if (appPrefs [inputs [i].name] != undefined) {" created="Fri, 04 Jan 2013 15:35:01 GMT" pgfnum="16667">
								<outline text="inputs [i].value = appPrefs [inputs [i].name];" isComment="true"/>
								<outline text="if (inputs [i].type == &quot;checkbox&quot;) {" created="Sat, 19 Jan 2013 17:29:19 GMT" pgfnum="17413">
									<outline text="inputs [i].checked = appPrefs [inputs [i].name];" created="Sat, 19 Jan 2013 17:29:48 GMT" pgfnum="17417"/>
									<outline text="alert (inputs [i].name + &quot; is a checkbox. Its value is &quot; + inputs [i].checked);" isComment="true" created="Sun, 20 Jan 2013 23:33:08 GMT" pgfnum="17435"/>
									<outline text="}" created="Sat, 19 Jan 2013 17:30:56 GMT" pgfnum="17418"/>
									</outline>
								<outline text="else {" created="Sat, 19 Jan 2013 17:30:58 GMT" pgfnum="17419">
									<outline text="inputs [i].value = appPrefs [inputs [i].name];"/>
									<outline text="}" created="Sat, 19 Jan 2013 17:31:00 GMT" pgfnum="17420"/>
									</outline>
								<outline text="}" created="Fri, 04 Jan 2013 15:35:13 GMT" pgfnum="16668"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="" created="Fri, 04 Jan 2013 22:04:15 GMT" pgfnum="16695"/>
						<outline text="var textareas = document.getElementById (&quot;idSettingsDialog&quot;).getElementsByTagName (&quot;textarea&quot;), i;" created="Fri, 04 Jan 2013 13:12:48 GMT" pgfnum="16622"/>
						<outline text="for (var i = 0; i &lt; textareas.length; i++) {">
							<outline text="if (appPrefs [textareas [i].name] != undefined) {" created="Fri, 04 Jan 2013 15:35:01 GMT" pgfnum="16667">
								<outline text="textareas [i].value = appPrefs [textareas [i].name];"/>
								<outline text="}" created="Fri, 04 Jan 2013 15:35:13 GMT" pgfnum="16668"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function settingsCloseDialog (event) {">
						<outline text="Changes" isComment="true">
							<outline text="4/11/16; 5:03:56 PM by DW">
								<outline text="Add optional param, the event that caused the close. "/>
								</outline>
							</outline>
						<outline text="try { //6/7/14 by DW" created="Sat, 07 Jun 2014 12:55:57 GMT" pgfnum="41818">
							<outline text="concord.resumeListening (); //3/11/13 by DW" created="Mon, 11 Mar 2013 17:02:18 GMT" pgfnum="20149"/>
							<outline text="}" created="Sat, 07 Jun 2014 12:56:05 GMT" pgfnum="41821"/>
							</outline>
						<outline text="catch (err) {" created="Sat, 07 Jun 2014 12:56:06 GMT" pgfnum="41822">
							<outline text="}" created="Sat, 07 Jun 2014 12:56:11 GMT" pgfnum="41823"/>
							</outline>
						<outline text=""/>
						<outline text="if (event !== undefined) { //4/11/16 by DW">
							<outline text="event.stopPropagation ();"/>
							<outline text="}"/>
							</outline>
						<outline text="" created="Sat, 07 Jun 2014 12:52:09 GMT" pgfnum="41815"/>
						<outline text="$(&quot;#idSettingsDialog&quot;).modal ('hide'); "/>
						<outline text="};"/>
						</outline>
					<outline text="function settingsOkClicked () {">
						<outline text="settingsGetValuesFromDialog (prefs.appPrefs); "/>
						<outline text=""/>
						<outline text="settingsCloseDialog ();"/>
						<outline text="prefsChanged ();"/>
						<outline text=""/>
						<outline text="if (appOptions.applySettingsCallback !== undefined) {">
							<outline text="appOptions.applySettingsCallback (prefs.appPrefs);"/>
							<outline text="}"/>
							</outline>
						<outline text="if (saveSettingsCallback !== undefined) {">
							<outline text="saveSettingsCallback (prefs.appPrefs);"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text=""/>
					<outline text="function shellOpenSettingsDialog (saveCallback) {">
						<outline text="saveSettingsCallback = saveCallback; "/>
						<outline text="" created="Sat, 07 Jun 2014 12:55:57 GMT" pgfnum="41817"/>
						<outline text="try { //6/7/14 by DW" created="Sat, 07 Jun 2014 12:55:57 GMT" pgfnum="41818">
							<outline text="concord.stopListening (); //3/11/13 by DW" created="Mon, 11 Mar 2013 17:02:18 GMT" pgfnum="20149"/>
							<outline text="}" created="Sat, 07 Jun 2014 12:56:05 GMT" pgfnum="41821"/>
							</outline>
						<outline text="catch (err) {" created="Sat, 07 Jun 2014 12:56:06 GMT" pgfnum="41822">
							<outline text="}" created="Sat, 07 Jun 2014 12:56:11 GMT" pgfnum="41823"/>
							</outline>
						<outline text="" created="Sat, 07 Jun 2014 12:55:57 GMT" pgfnum="41819"/>
						<outline text="$(&quot;#idSettingsDialog&quot;).modal ('show'); "/>
						<outline text="settingsSetDefaultValues (prefs.appPrefs); "/>
						<outline text=""/>
						<outline text="$(&quot;#idSettingsDialog&quot;).on (&quot;keydown&quot;, function (event) { //1/26/15 by DW">
							<outline text="if (event.which == 13) {" created="Wed, 09 Jan 2013 14:30:41 GMT" pgfnum="16921">
								<outline text="settingsOkClicked ();" created="Wed, 09 Jan 2013 16:03:12 GMT" pgfnum="16941"/>
								<outline text="return (false);" created="Wed, 06 Feb 2013 21:11:54 GMT" pgfnum="18314"/>
								<outline text="}" created="Wed, 09 Jan 2013 14:31:27 GMT" pgfnum="16924"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//prefs">
					<outline text="function getPrefs (callback) {">
						<outline text="var f = config.userDataFolder + fnamePrefs;"/>
						<outline text="fs.readFile (f, function (err, data) {">
							<outline text="if (err) {">
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="for (var x in jstruct) {">
										<outline text="prefs [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;getPrefs: err.message == &quot; + err.message);"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback ();"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function setPrefs (callback) {">
						<outline text="var f = config.userDataFolder + fnamePrefs;"/>
						<outline text="prefs.ctPrefsSaves++;"/>
						<outline text="prefs.whenLastPrefsSave = new Date ();"/>
						<outline text="fs.writeFile (f, jsonStringify (prefs), function (err) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="function shellGetPrefs (callback) {">
						<outline text="getPrefs (function () {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (prefs.appPrefs);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="" isComment="true"/>
						<outline text="var f = config.userDataFolder + fnamePrefs;" isComment="true"/>
						<outline text="fs.readFile (f, function (err, data) {" isComment="true">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback (JSON.parse (data.toString ()));"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;shellGetPrefs: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function shellSetPrefs (appPrefs) {">
						<outline text="for (var x in appPrefs) {">
							<outline text="prefs.appPrefs [x] = appPrefs [x];"/>
							<outline text="}"/>
							</outline>
						<outline text="prefs.appPrefs = appPrefs;" isComment="true"/>
						<outline text="prefsChanged ();"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="function prefsChanged () {">
						<outline text="flPrefsChanged = true;"/>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					</outline>
				<outline text="//tabs">
					<outline text="function addTab (tabtitle, tabfile) {">
						<outline text="var tab = {">
							<outline text="f: tabfile,"/>
							<outline text="title: tabtitle,"/>
							<outline text="flUpdateWaiting: false,"/>
							<outline text="flInstantOutline: false,"/>
							<outline text="flLocked: false,"/>
							<outline text="temp: new Object ()"/>
							<outline text="};"/>
							</outline>
						<outline text="var ixtab = prefs.myTabs.length;"/>
						<outline text="prefs.myTabs [ixtab] = tab;"/>
						<outline text="prefs.ixCurrentTab = ixtab;"/>
						<outline text="buildTabs ();"/>
						<outline text="updateLockIcon ();" isComment="true"/>
						<outline text="prefsChanged ();"/>
						<outline text="return (tab);"/>
						<outline text="}"/>
						</outline>
					<outline text="function addInstantTab (url, jstruct) {">
						<outline text="var tab = {">
							<outline text="title: jstruct.title,"/>
							<outline text="flInstantOutline: true,"/>
							<outline text="flLocked: false,"/>
							<outline text="urlOutline: url,"/>
							<outline text="urlOpmlFile: jstruct.url,"/>
							<outline text="description: jstruct.description,"/>
							<outline text="socketserver: jstruct.socketserver,"/>
							<outline text="temp: new Object ()"/>
							<outline text="};"/>
							</outline>
						<outline text="var flTabFound = false;"/>
						<outline text="if (tab.socketserver === &quot;undefined&quot;) {">
							<outline text="tab.socketserver = undefined;"/>
							<outline text="}"/>
							</outline>
						<outline text="var ixtab = prefs.myTabs.length;"/>
						<outline text="prefs.myTabs [ixtab] = tab;"/>
						<outline text="prefs.ixCurrentTab = ixtab;"/>
						<outline text="buildTabs ();"/>
						<outline text="updateLockIcon ();" isComment="true"/>
						<outline text="prefsChanged ();"/>
						<outline text="return (tab);"/>
						<outline text="}"/>
						</outline>
					<outline text="function showHideTabs () {">
						<outline text="var displayval = &quot;block&quot;;"/>
						<outline text="if (prefs.myTabs.length == 0) {">
							<outline text="displayval = &quot;none&quot;;"/>
							<outline text="$(&quot;#idEditorContainer&quot;).empty (); //5/5/17 by DW "/>
							<outline text="}"/>
							</outline>
						<outline text="$(&quot;#idTabsContainer&quot;).css (&quot;display&quot;, displayval);"/>
						<outline text="" isComment="true"/>
						<outline text="$(&quot;#idIcons&quot;).css (&quot;display&quot;, displayval); //7/6/16 by DW" isComment="true"/>
						<outline text="$(&quot;#idAttributesDisplay&quot;).css (&quot;display&quot;, (displayval != &quot;none&quot;) ? &quot;block&quot; : &quot;none&quot;); //7/7/16 by DW" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="function buildTabs () {">
						<outline text="$(&quot;#idTabList&quot;).empty ();"/>
						<outline text="for (var i = 0; i &lt; prefs.myTabs.length; i++) {">
							<outline text="var tab = prefs.myTabs [i], activetab = &quot;&quot;, clickscript = &quot;shell.tabClick (&quot; + i + &quot;)&quot;, icon, title, updateWaitingClass = &quot;&quot;;"/>
							<outline text="if (i == prefs.ixCurrentTab) {">
								<outline text="activetab = &quot; class=\&quot;active\&quot;&quot;;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (tab.flUpdateWaiting) {">
									<outline text="updateWaitingClass = &quot; iconUpdateWaiting &quot;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="//set icon">
								<outline text="if (tab.flInstantOutline) {">
									<outline text="icon = &quot;bolt&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="icon = &quot;file-text-o&quot;;"/>
									<outline text="}"/>
									</outline>
								<outline text="icon = &quot;&lt;i class=\&quot;fa fa-&quot; + icon + updateWaitingClass + &quot;\&quot;&gt;&lt;/i&gt;&quot;;"/>
								</outline>
							<outline text="//set title">
								<outline text="title = &quot;&lt;span class=\&quot;spTabTitleText\&quot;&gt;&quot; + tab.title + &quot;&lt;/span&gt;&quot;;"/>
								</outline>
							<outline text=""/>
							<outline text="$(&quot;#idTabList&quot;).append (&quot;&lt;li&quot; + activetab + &quot; id='tab&quot; + i + &quot;'&gt;&lt;a data-toggle=\&quot;tab\&quot; onclick='&quot; + clickscript + &quot;'&gt;&quot;  + icon + title + &quot;&lt;/a&gt;&lt;/li&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="showHideTabs ();"/>
						<outline text="}"/>
						</outline>
					<outline text="function releaseWaitingUpdate (tab) {">
						<outline text="sendUpdateToTab (prefs.ixCurrentTab, tab.updateData);"/>
						<outline text="delete tab.updateData;"/>
						<outline text="tab.flUpdateWaiting = false;"/>
						<outline text="updateLockIcon ();"/>
						<outline text="}"/>
						</outline>
					<outline text="function tabClick (ix, callback) {">
						<outline text="if (ix &lt; prefs.myTabs.length) { //not out of range ">
							<outline text="var tab = prefs.myTabs [ix];"/>
							<outline text="prefs.ixCurrentTab = ix;"/>
							<outline text="if (tab.flUpdateWaiting) {">
								<outline text="if (!tab.flLocked) {">
									<outline text="releaseWaitingUpdate (tab);"/>
									<outline text="sendUpdateToTab (prefs.ixCurrentTab, tab.updateData);" isComment="true"/>
									<outline text="delete tab.updateData;" isComment="true"/>
									<outline text="tab.flUpdateWaiting = false;" isComment="true"/>
									<outline text="updateLockIcon ();" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="prefsChanged ();"/>
							<outline text="buildTabs ();"/>
							<outline text="updateLockIcon ();"/>
							<outline text="if (appOptions.tabClickCallback !== undefined) {">
								<outline text="appOptions.tabClickCallback (tab);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function closeTab (ixtab) {">
						<outline text="if (ixtab === undefined) {">
							<outline text="ixtab = prefs.ixCurrentTab;"/>
							<outline text="}"/>
							</outline>
						<outline text="if (appOptions.tabCloseCallback !== undefined) {">
							<outline text="appOptions.tabCloseCallback (prefs.myTabs [ixtab]); //delete any attached objects"/>
							<outline text="}"/>
							</outline>
						<outline text="prefs.myTabs.splice (prefs.ixCurrentTab, 1);"/>
						<outline text="var ixmax = prefs.myTabs.length - 1;"/>
						<outline text="if (prefs.ixCurrentTab &gt; ixmax) {">
							<outline text="prefs.ixCurrentTab = ixmax;"/>
							<outline text="}"/>
							</outline>
						<outline text="buildTabs ();"/>
						<outline text="tabClick (prefs.ixCurrentTab);"/>
						<outline text="updateLockIcon ();"/>
						<outline text="prefsChanged ();"/>
						<outline text="}"/>
						</outline>
					<outline text="function getCurrentTab () {">
						<outline text="return (prefs.myTabs [prefs.ixCurrentTab]);"/>
						<outline text="}"/>
						</outline>
					<outline text="function sendUpdateToTab (ixtab, theData) {">
						<outline text="var tab = prefs.myTabs [ixtab];"/>
						<outline text="if ((ixtab == prefs.ixCurrentTab) &amp;&amp; (!tab.flLocked)) {">
							<outline text="if (appOptions.tabUpdatedCallback !== undefined) {">
								<outline text="appOptions.tabUpdatedCallback (tab, theData);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="tab.flUpdateWaiting = true;"/>
							<outline text="tab.updateData = theData;"/>
							<outline text="buildTabs ();"/>
							<outline text="updateLockIcon ();"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function wsWatchForChange (ixtab) {">
						<outline text="Changes" isComment="true">
							<outline text="4/28/17; 11:35:20 AM by DW">
								<outline text="Don't try to connect if tab.socketserver is undefined."/>
								</outline>
							</outline>
						<outline text="var tab = prefs.myTabs [ixtab];"/>
						<outline text="if (tab.myChatLogSocket === undefined) {">
							<outline text="if (tab.socketserver !== undefined) { //4/28/17 by DW">
								<outline text="console.log (&quot;wsWatchForChange: tab.socketserver == &quot; + tab.socketserver);"/>
								<outline text=""/>
								<outline text="var theSocket = new WebSocket (tab.socketserver); "/>
								<outline text="tab.myChatLogSocket = theSocket;"/>
								<outline text=""/>
								<outline text="theSocket.onopen = function (evt) {">
									<outline text="var msg = &quot;watch &quot; + tab.urlOpmlFile;"/>
									<outline text="console.log (&quot;sending: \&quot;&quot; + msg + &quot;\&quot;&quot;);"/>
									<outline text="theSocket.send (msg);"/>
									<outline text="};"/>
									</outline>
								<outline text="theSocket.onmessage = function (evt) {">
									<outline text="var s = evt.data;"/>
									<outline text="if (s !== undefined) { //no error">
										<outline text="var updatekey = &quot;update\r&quot;;"/>
										<outline text="if (beginsWith (s, updatekey)) { //it's an update">
											<outline text="var theData = stringDelete (s, 1, updatekey.length);"/>
											<outline text="console.log (&quot;wsWatchForChange: update received, theData.length == &quot; + theData.length);"/>
											<outline text="sendUpdateToTab (ixtab, theData);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="theSocket.onclose = function (evt) {">
									<outline text="console.log (&quot;tab.myChatLogSocket was closed.&quot;);"/>
									<outline text="tab.myChatLogSocket = undefined;"/>
									<outline text="};"/>
									</outline>
								<outline text="theSocket.onerror = function (evt) {">
									<outline text="console.log (&quot;tab.myChatLogSocket received an error&quot;);"/>
									<outline text="};"/>
									</outline>
								<outline text=""/>
								<outline text="console.log (&quot;wsWatchForChange: tab.myChatLogSocket == &quot; + jsonStringify (tab.myChatLogSocket));"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="function getTabsArray () { //so upper level can find out how many tabs there are, perhaps other info">
					<outline text="return (prefs.myTabs);"/>
					<outline text="}"/>
					</outline>
				<outline text="function updateLockIcon () {">
					<outline text="if (prefs.myTabs.length &gt; 0) {">
						<outline text="var tab = prefs.myTabs [prefs.ixCurrentTab];"/>
						<outline text="var enabledColor = &quot;gray&quot;, disabledColor = &quot;silver&quot;, updateWaitingColor = &quot;green&quot;;"/>
						<outline text=""/>
						<outline text="function enabled (id, fl) {">
							<outline text="var color = (fl) ? enabledColor : disabledColor"/>
							<outline text="$(&quot;#&quot; + id).css (&quot;color&quot;, color);"/>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="enabled (&quot;idLockIcon&quot;, tab.flInstantOutline);"/>
						<outline text=""/>
						<outline text="if (tab.flLocked) {">
							<outline text="classToRemove = &quot;fa-unlock&quot;, classToAdd = &quot;fa-lock&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="classToRemove = &quot;fa-lock&quot;, classToAdd = &quot;fa-unlock&quot;;"/>
							<outline text="}"/>
							</outline>
						<outline text="$(&quot;#idLockIcon&quot;).removeClass (classToRemove);"/>
						<outline text="$(&quot;#idLockIcon&quot;).addClass (classToAdd);"/>
						<outline text=""/>
						<outline text="if (tab.flLocked &amp;&amp; tab.flUpdateWaiting) {">
							<outline text="$(&quot;#idLockIcon&quot;).css (&quot;color&quot;, updateWaitingColor);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function lockIconClick () {">
					<outline text="var tab = prefs.myTabs [prefs.ixCurrentTab];"/>
					<outline text="tab.flLocked = !tab.flLocked;"/>
					<outline text="if (!tab.flLocked) {">
						<outline text="releaseWaitingUpdate (tab);"/>
						<outline text="sendUpdateToTab (prefs.ixCurrentTab, tab.updateData);" isComment="true"/>
						<outline text="tab.flUpdateWaiting = false;" isComment="true"/>
						<outline text="delete tab.updateData;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="updateLockIcon ();"/>
					<outline text="prefsChanged ();"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function updateTwitterMenuItem () {" created="Thu, 13 Jun 2013 23:01:54 GMT" pgfnum="26111">
					<outline text="document.getElementById (&quot;idTwitterConnectMenuItem&quot;).innerHTML = (twIsTwitterConnected ()) ? &quot;Sign off Twitter...&quot; : &quot;Sign on Twitter...&quot;;" created="Thu, 13 Jun 2013 23:02:33 GMT" pgfnum="26114"/>
					<outline text="}" created="Thu, 13 Jun 2013 23:02:05 GMT" pgfnum="26112"/>
					</outline>
				<outline text="function updateTwitterUsername () {" created="Thu, 13 Jun 2013 23:01:54 GMT" pgfnum="26111">
					<outline text="document.getElementById (&quot;idTwitterUsername&quot;).innerHTML = (twIsTwitterConnected ()) ? localStorage.twScreenName : &quot;Sign on here&quot;;" created="Thu, 13 Jun 2013 23:02:33 GMT" pgfnum="26114"/>
					<outline text="}" created="Thu, 13 Jun 2013 23:02:05 GMT" pgfnum="26112"/>
					</outline>
				<outline text="function initMenus () {" created="Thu, 28 Mar 2013 21:12:24 GMT" pgfnum="21611">
					<outline text="var cmdKeyPrefix = getCmdKeyPrefix (); //10/6/14 by DW"/>
					<outline text="document.getElementById (&quot;idMenuProductName&quot;).innerHTML = config.productnameForDisplay; " created="Tue, 05 Feb 2013 01:08:38 GMT" pgfnum="18247"/>
					<outline text="document.getElementById (&quot;idMenuAboutProductName&quot;).innerHTML = config.productnameForDisplay; " created="Tue, 05 Feb 2013 01:08:38 GMT" pgfnum="18247"/>
					<outline text="$(&quot;#idMenubar .dropdown-menu li&quot;).each (function () {">
						<outline text="var li = $(this);"/>
						<outline text="var liContent = li.html ();"/>
						<outline text="liContent = liContent.replace (&quot;Cmd-&quot;, cmdKeyPrefix);"/>
						<outline text="li.html (liContent);"/>
						<outline text="});"/>
						</outline>
					<outline text="updateTwitterMenuItem ();" created="Thu, 13 Jun 2013 23:08:07 GMT" pgfnum="26123"/>
					<outline text="updateTwitterUsername ();"/>
					<outline text="}" created="Thu, 28 Mar 2013 21:12:30 GMT" pgfnum="21612"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="if (flPrefsChanged) {">
						<outline text="flPrefsChanged = false;"/>
						<outline text="setPrefs ();"/>
						<outline text="}"/>
						</outline>
					<outline text="for (var i = 0; i &lt; prefs.myTabs.length; i++) {">
						<outline text="var tab = prefs.myTabs [i];"/>
						<outline text="if (getBoolean (tab.flInstantOutline)) {">
							<outline text="wsWatchForChange (i);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function cleanPrefsAtStartup () {">
					<outline text="Changes" isComment="true">
						<outline text="5/5/17; 12:13:16 PM by DW">
							<outline text="When we start up, remove objects in prefs that need to be reset on each run. "/>
							</outline>
						</outline>
					<outline text="for (var i = 0; i &lt; prefs.myTabs.length; i++) { //values that don't persist betw invocations">
						<outline text="var tab = prefs.myTabs [i];"/>
						<outline text="tab.temp = new Object ();"/>
						<outline text="delete tab.myChatLogSocket;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function init (options, callback) {">
					<outline text="console.log (&quot;shell.init&quot;);"/>
					<outline text="config = shellGetConfig (); //set global, it's synchronous"/>
					<outline text="$(&quot;#idPageTitle&quot;).text (config.productnameForDisplay); //5/5/17 by DW"/>
					<outline text="$(&quot;#idVersionNumber&quot;).html (&quot;v&quot; + config.version); "/>
					<outline text="twStorageData.urlTwitterServer = config.urlTwitterServer;"/>
					<outline text="appOptions = options;"/>
					<outline text="getPrefs (function () {">
						<outline text="cleanPrefsAtStartup ();"/>
						<outline text=""/>
						<outline text="console.log (&quot;shell.init: prefs == &quot; + jsonStringify (prefs)); //4/28/17 by DW"/>
						<outline text=""/>
						<outline text="shellSetupIpcHandlers ();"/>
						<outline text="shellSetupSystemMenus ();"/>
						<outline text="twGetOauthParams (false); "/>
						<outline text="buildTabs ();" isComment="true"/>
						<outline text="tabClick (prefs.ixCurrentTab);"/>
						<outline text=""/>
						<outline text="$(&quot;#idTwitterIcon&quot;).html (twStorageConsts.fontAwesomeIcon);"/>
						<outline text="initMenus ();"/>
						<outline text="updateLockIcon ();"/>
						<outline text=""/>
						<outline text="if (appOptions.applySettingsCallback !== undefined) {">
							<outline text="if (prefs.appPrefs !== undefined) {">
								<outline text="appOptions.applySettingsCallback (prefs.appPrefs);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="self.setInterval (everySecond, 1000); "/>
						<outline text=""/>
						<outline text="if (callback !== undefined) {">
							<outline text="callback (prefs.appPrefs);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="lib/electronshell.css">
				<outline text=".divPageBody {" isComment="true">
					<outline text="color: orange;"/>
					<outline text="}"/>
					</outline>
				<outline text="/* settings */">
					<outline text=".divSettingsDialog {">
						<outline text="font-family: Arial;"/>
						<outline text="font-size: 16px;"/>
						<outline text="line-height: 140%;" created="Thu, 03 Jan 2013 19:17:55 GMT" pgfnum="16596"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog p {">
						<outline text="font-family: Arial;"/>
						<outline text="font-size: 16px;"/>
						<outline text="line-height: 140%;" created="Thu, 03 Jan 2013 19:17:55 GMT" pgfnum="16596"/>
						<outline text="min-height: 10px;" created="Sun, 06 Jan 2013 16:48:41 GMT" pgfnum="16754"/>
						<outline text="margin-bottom: 1.3em;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog label { ">
						<outline text="display: inline;"/>
						<outline text="float: left;"/>
						<outline text="text-align: right;"/>
						<outline text="padding-top: 4px;"/>
						<outline text="width: 130px;"/>
						<outline text="margin-right: .5em;"/>
						<outline text="font-family: Arial;"/>
						<outline text="font-size: 16px;"/>
						<outline text="line-height: 140%;" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog fieldset { /* 4/30/13 by DW */">
						<outline text="margin-left: 5px;" created="Tue, 30 Apr 2013 23:28:55 GMT" pgfnum="23390"/>
						<outline text="margin-right: 5px;" created="Tue, 30 Apr 2013 23:29:01 GMT" pgfnum="23391"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .clearfix { ">
						<outline text="margin-bottom: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .uneditable-input { ">
						<outline text="-moz-box-shadow: 0;"/>
						<outline text="border: none;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .divPrefsCheckbox { ">
						<outline text="margin-left: 140px;"/>
						<outline text="margin-top: -2px;" created="Thu, 03 Jan 2013 19:25:36 GMT" pgfnum="16597"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .divPrefsRadioList {">
						<outline text="margin-left: 140px;"/>
						<outline text="line-height: 200%;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog h3 { ">
						<outline text="margin-top: 10px;"/>
						<outline text="margin-bottom: 6px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .divPrefsCheckbox input { ">
						<outline text="margin-top: 0;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog textarea { ">
						<outline text="width: 530px;"/>
						<outline text="height: auto;"/>
						<outline text="display: inline-block;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog .row {">
						<outline text="line-height: 24px;"/>
						<outline text="margin-bottom: 12px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog red {">
						<outline text="color: red;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divSettingsDialog h4 {">
						<outline text="font-size: 22px;"/>
						<outline text="padding-top: 15px;"/>
						<outline text="padding-bottom: 12px;  /* 4/12/12 DW -- increased from 5px */"/>
						<outline text="}"/>
						</outline>
					<outline text="" created="Tue, 01 Jan 2013 16:35:17 GMT" pgfnum="16546"/>
					<outline text=".divSettingsDialog .xlarge {" created="Tue, 01 Jan 2013 16:34:45 GMT" pgfnum="16543">
						<outline text="width: 530px;"/>
						<outline text="font-size: 16px;" created="Tue, 01 Jan 2013 16:39:50 GMT" pgfnum="16549"/>
						<outline text="height: auto;" created="Tue, 01 Jan 2013 16:35:06 GMT" pgfnum="16544"/>
						<outline text="}" created="Tue, 01 Jan 2013 16:35:10 GMT" pgfnum="16545"/>
						</outline>
					<outline text=".divSettingsDialog input {" created="Tue, 01 Jan 2013 16:46:46 GMT" pgfnum="16552">
						<outline text="margin-bottom: 0;" created="Tue, 01 Jan 2013 16:45:25 GMT" pgfnum="16551"/>
						<outline text="}" created="Tue, 01 Jan 2013 16:46:54 GMT" pgfnum="16554"/>
						</outline>
					<outline text="" created="Mon, 07 Jan 2013 14:57:15 GMT" pgfnum="16813"/>
					<outline text=".divSettingsDialog .nav { ">
						<outline text="margin-bottom: 18px;"/>
						<outline text="}"/>
						</outline>
					<outline text=".divDialogElements input {">
						<outline text="font-size: 18px;"/>
						<outline text="padding: 3px; "/>
						<outline text="height: 32px; "/>
						<outline text="}"/>
						</outline>
					<outline text=".divDialogElements .xlarge {" created="Thu, 03 Jan 2013 22:51:02 GMT" pgfnum="16600">
						<outline text="width: 530px;"/>
						<outline text="font-size: 16px;" created="Tue, 01 Jan 2013 16:39:50 GMT" pgfnum="16549"/>
						<outline text="height: auto;" created="Tue, 01 Jan 2013 16:35:06 GMT" pgfnum="16544"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:51:18 GMT" pgfnum="16602"/>
						</outline>
					<outline text=".divDialogElements .numberPrefsInput {" created="Mon, 07 Jan 2013 15:04:18 GMT" pgfnum="16814">
						<outline text="width: 50px;" created="Mon, 07 Jan 2013 15:04:35 GMT" pgfnum="16815"/>
						<outline text="}" created="Mon, 07 Jan 2013 15:04:39 GMT" pgfnum="16816"/>
						</outline>
					<outline text=".divDialogElements textarea { ">
						<outline text="width: 530px;"/>
						<outline text="height: auto;"/>
						<outline text="display: inline-block;"/>
						<outline text="font-size: 16px;" created="Tue, 01 Jan 2013 16:39:50 GMT" pgfnum="16549"/>
						<outline text="}"/>
						</outline>
					<outline text=".divDialogElements input[type=&quot;checkbox&quot;] {" created="Thu, 03 Jan 2013 22:51:02 GMT" pgfnum="16600">
						<outline text="margin-right: 3px;"/>
						<outline text="margin-top: -1px;" created="Thu, 03 Jan 2013 22:54:27 GMT" pgfnum="16603"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:51:18 GMT" pgfnum="16602"/>
						</outline>
					<outline text=""/>
					<outline text=".nav-tabs &gt; li {" created="Thu, 03 Jan 2013 22:57:29 GMT" pgfnum="16604">
						<outline text="color: gray;" created="Thu, 03 Jan 2013 22:57:40 GMT" pgfnum="16605"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:57:49 GMT" pgfnum="16606"/>
						</outline>
					<outline text=".nav-tabs &gt; .active {" created="Thu, 03 Jan 2013 22:58:29 GMT" pgfnum="16607">
						<outline text="font-weight: bold;" created="Thu, 03 Jan 2013 22:58:48 GMT" pgfnum="16608"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:58:52 GMT" pgfnum="16609"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=""/>
					<outline text=".nav-tabs &gt; li &gt; a { /* 9/19/14 by DW -- they were interfering with the tabs in rivers, doesn't seem to be needed in menus */" isComment="true" created="Thu, 03 Jan 2013 22:57:29 GMT" pgfnum="16604">
						<outline text="font-size: 16px;" created="Thu, 03 Jan 2013 22:57:40 GMT" pgfnum="16605"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:57:49 GMT" pgfnum="16606"/>
						</outline>
					<outline text=".nav-tabs &gt; .active &gt; a { /* 9/19/14 by DW -- they were interfering with the tabs in rivers, doesn't seem to be needed in menus */" isComment="true" created="Thu, 03 Jan 2013 22:58:29 GMT" pgfnum="16607">
						<outline text="font-weight: bold;" created="Thu, 03 Jan 2013 22:58:48 GMT" pgfnum="16608"/>
						<outline text="}" created="Thu, 03 Jan 2013 22:58:52 GMT" pgfnum="16609"/>
						</outline>
					<outline text=".divButton {">
						<outline text="padding-top: 12px;"/>
						<outline text="}" created="Wed, 28 Mar 2012 16:04:12 GMT" pgfnum="6929"/>
						</outline>
					<outline text=".divSettingsDialog .modal {" created="Tue, 01 Jan 2013 03:59:34 GMT" pgfnum="16538">
						<outline text="left: 40%;" created="Tue, 01 Jan 2013 03:59:57 GMT" pgfnum="16539"/>
						<outline text="width: 740px;" created="Tue, 01 Jan 2013 04:00:36 GMT" pgfnum="16541"/>
						<outline text="}" created="Tue, 01 Jan 2013 04:00:11 GMT" pgfnum="16540"/>
						</outline>
					<outline text=".divSettingsDialog .btn {" created="Wed, 26 Dec 2012 23:19:22 GMT" pgfnum="16391">
						<outline text="width: 80px;" created="Wed, 26 Dec 2012 23:19:34 GMT" pgfnum="16393"/>
						<outline text="margin-left: 5px;" created="Wed, 26 Dec 2012 23:22:19 GMT" pgfnum="16394"/>
						<outline text="}" created="Wed, 26 Dec 2012 23:19:31 GMT" pgfnum="16392"/>
						</outline>
					<outline text=".divSettingsDialog .ui-input-text, .divSettingsDialog .ui-checkbox { /* 4/11/13 by DW */">
						<outline text="display: inline-block;"/>
						<outline text="}"/>
						</outline>
					</outline>
				</outline>
			<outline text="main.js">
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const electronland = require (__dirname + &quot;/lib/electron.js&quot;); "/>
				<outline text=""/>
				<outline text="var myConfig = {">
					<outline text="productname: &quot;electronLandDemo&quot;," created="Sun, 06 Jan 2013 15:39:06 GMT" pgfnum="16734"/>
					<outline text="productnameForDisplay: &quot;ElectronLand Demo&quot;," created="Sun, 06 Jan 2013 15:39:06 GMT" pgfnum="16734"/>
					<outline text="description: &quot;Just a demo app.&quot;," created="Wed, 07 May 2014 12:04:38 GMT" pgfnum="41257"/>
					<outline text="userDataFolder: undefined,"/>
					<outline text="appDirname: __dirname, "/>
					<outline text="version: &quot;0.41d&quot;" created="Fri, 04 Jan 2013 22:12:08 GMT" pgfnum="16702"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function startup () {">
					<outline text="console.log (utils.padWithZeros (12, 5));"/>
					<outline text="electronland.init (myConfig, function () {">
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="startup ();"/>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;electronLand&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;main.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="config.json" isComment="true">
				<outline text="{">
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		</body>
	</opml>
